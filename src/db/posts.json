[
	{
		"data": {
			"title": "简历优化",
			"date": "2021-03-21T14:03:03.000Z",
			"tags": "简历"
		},
		"content": "<a id=\"一、基本信息\"><h2>一、基本信息</h2></a>简洁高效，整齐美观<br/>姓名，性别，年龄，联系方式，工作年限可以直接注明。如果学校比较亮眼的话可以写上。<a id=\"二、期望\"><h2>二、期望</h2></a>期望职位一定要有。<br/>至于期望薪资，对于自我认知非常明确，定位非常清晰不想浪费时间可以写期望薪资，无论写不写期望薪资，都可以准备一份没有写期望薪资的简历，用于技术面时使用。<br/>技术面时一般是和你平级的人面试，目前IT行业存在很明显的薪资倒挂现象。<a id=\"三、专业技术\"><h2>三、专业技术</h2></a>并非多多益善，写玩明白的，不怕面试官再三追问的技术栈<a id=\"四、工作经历\"><h2>四、工作经历</h2></a>频繁跳槽或在同一层面反复横跳不要有。<br/>谨慎跳槽，不跳则已，一跳惊人。<a id=\"五、项目经历\"><h2>五、项目经历</h2></a>按年或公司为单位，每个单位三到四个项目，总数控制在在十个以内。体现出技术业务两手抓。<br/>项目体现使用的技术栈，整体业务，和个人职责。突出项目之间的区别，一级每个项目的两点，以及个人职责的进步。每个项目的个人职责不要完全一样。<a id=\"六、自评/优势\"><h2>六、自评/优势</h2></a>写实打实的可考证信息。<br/>类似个人性格积极向上的废话可以省略。<br/>结合当前我们IT行业这个内卷大潮，吃苦耐劳愿意加班，确实是可以写上的优势。",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、基本信息",
				"level": 2
			},
			{
				"label": "二、期望",
				"level": 2
			},
			{
				"label": "三、专业技术",
				"level": 2
			},
			{
				"label": "四、工作经历",
				"level": 2
			},
			{
				"label": "五、项目经历",
				"level": 2
			},
			{
				"label": "六、自评/优势",
				"level": 2
			}
		],
		"id": 1616335383
	},
	{
		"data": {
			"title": "echarts使用中国地图",
			"date": "2021-03-19T14:15:59.000Z",
			"tags": "echarts"
		},
		"content": "<a id=\"一、地图数据下载\"><h2>一、地图数据下载</h2></a>一、高德开发平台数据<blockquote>\n<a href=\"http://datav.aliyun.com/tools/atlas/#&amp;lat=31.780695728407512&amp;lng=106.720060693723&amp;zoom=4.5\">http://datav.aliyun.com/tools/atlas/#&amp;lat=31.780695728407512&amp;lng=106.720060693723&amp;zoom=4.5</a></blockquote>\n二、 中国地图数据JSON API<blockquote>\n<a href=\"https://geo.datav.aliyun.com/areas_v2/bound/100000.json\">https://geo.datav.aliyun.com/areas_v2/bound/100000.json</a><br/><a href=\"https://geo.datav.aliyun.com/areas/bound/geojson?code=100000\">https://geo.datav.aliyun.com/areas/bound/geojson?code=100000</a></blockquote>\n三、中国地图数据JSON API(包含子区域)<blockquote>\n<a href=\"https://geo.datav.aliyun.com/areas_v2/bound/100000_full.json\">https://geo.datav.aliyun.com/areas_v2/bound/100000_full.json</a><br/><a href=\"https://geo.datav.aliyun.com/areas/bound/geojson?code=100000_full\">https://geo.datav.aliyun.com/areas/bound/geojson?code=100000_full</a></blockquote>\n<a id=\"二、注册地图\"><h2>二、注册地图</h2></a>注册可用的地图，必须在包括 geo 组件或者 map 图表类型的时候才能使用。<br/><code>echarts.registerMap(mapName: string, geoJson: Object, specialAreas?: Object)</code><ul>\n<li><code>mapName</code><br/>地图名称，在 geo 组件或者 map 图表类型中设置的 map 对应的就是该值。</li>\n<li><code>geoJson</code><br/>GeoJson 格式的数据，具体格式见 <code>https://geojson.org/</code></li>\n<li><code>specialAreas</code><br/>可选。将地图中的部分区域缩放到合适的位置，可以使得整个地图的显示更加好看。<pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> initChinaData <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./china2.json&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> initChinaData2 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./china.json&#x27;</span>;\n\n</code></pre>\n</li>\n</ul>\nuseEffect(() =&gt; {<br/>  const myChart = echarts.init(chartsRef.current);<br/>  const myChart2 = echarts.init(chartsRef2.current);  // 注册两份可用的地图<br/>  // 在 geo 组件或者 map 图表类型中设置的 map 对应的就是该值<br/>  echarts.registerMap(&#39;china&#39;, initChinaData);<br/>  echarts.registerMap(&#39;china2&#39;, initChinaData2);<br/>}, []);<pre class='hljs'><code>\n## 三、使用气泡图\n\n散点（气泡）图。直角坐标系上的散点图可以用来展现数据的 x，y 之间的关系，如果数据项有多个维度，其它维度的值可以通过不同大小的 symbol 展现成气泡图，也可以用颜色来表现。这些可以配合 visualMap 组件完成。\n可以应用在直角坐标系，极坐标系，地理坐标系上。\n</code></pre>\n<pre class='hljs'><code>{\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">&#x27;Scatter&#x27;</span>,\n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">&#x27;scatter&#x27;</span>,\n  <span class=\"hljs-attr\">coordinateSystem:</span> <span class=\"hljs-string\">&#x27;geo&#x27;</span>,\n  <span class=\"hljs-string\">...positionConfig</span>,\n  <span class=\"hljs-attr\">data:</span> [],\n  <span class=\"hljs-attr\">symbolOffset:</span> [<span class=\"hljs-number\">142</span>, <span class=\"hljs-number\">-30</span>],\n  <span class=\"hljs-attr\">symbolSize:</span> [<span class=\"hljs-number\">296</span>, <span class=\"hljs-number\">60</span>],\n  <span class=\"hljs-attr\">symbol:</span> <span class=\"hljs-string\">`image://$</span>{<span class=\"hljs-string\">lineImg</span>}<span class=\"hljs-string\">`</span>,\n  <span class=\"hljs-attr\">label:</span> {\n    <span class=\"hljs-attr\">show:</span> <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">formatter(params)</span> {\n      <span class=\"hljs-string\">const</span> { <span class=\"hljs-attr\">data:</span> { <span class=\"hljs-string\">name</span>, <span class=\"hljs-string\">count</span> } } <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">params;</span>\n      <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">`</span>{<span class=\"hljs-string\">styleName|text</span> <span class=\"hljs-string\">content</span> <span class=\"hljs-string\">text</span> <span class=\"hljs-string\">content</span>}<span class=\"hljs-string\">`</span> <span class=\"hljs-string\">标记样式名。</span>\n      <span class=\"hljs-string\">return</span> <span class=\"hljs-string\">`</span>{<span class=\"hljs-string\">fLine|</span> <span class=\"hljs-string\">$</span>{<span class=\"hljs-string\">name</span>}}<span class=\"hljs-string\">\\n</span>{<span class=\"hljs-string\">sLine|·</span> <span class=\"hljs-string\">检测项目:</span> <span class=\"hljs-string\">$</span>{<span class=\"hljs-string\">count</span>[<span class=\"hljs-number\">0</span>]} <span class=\"hljs-string\">个</span>}<span class=\"hljs-string\">\\n</span>{<span class=\"hljs-string\">sLine|·</span> <span class=\"hljs-string\">监测项目:</span> <span class=\"hljs-string\">$</span>{<span class=\"hljs-string\">count</span>[<span class=\"hljs-number\">1</span>]} <span class=\"hljs-string\">个</span>}<span class=\"hljs-string\">`;</span>\n    },\n    <span class=\"hljs-attr\">position:</span> [<span class=\"hljs-number\">48</span>, <span class=\"hljs-number\">-116</span>],\n    <span class=\"hljs-attr\">backgroundColor:</span> <span class=\"hljs-string\">&#x27;#002732&#x27;</span>,\n    <span class=\"hljs-attr\">padding:</span> [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n    <span class=\"hljs-attr\">borderRadius:</span> <span class=\"hljs-number\">3</span>,\n    <span class=\"hljs-attr\">opacity:</span> <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">rich:</span> {\n      <span class=\"hljs-attr\">fLine:</span> {\n        <span class=\"hljs-attr\">fontSize:</span> <span class=\"hljs-number\">16</span>,\n        <span class=\"hljs-attr\">backgroundColor:</span> <span class=\"hljs-string\">&#x27;#002732&#x27;</span>,\n        <span class=\"hljs-attr\">color:</span> <span class=\"hljs-string\">&#x27;#ffffff&#x27;</span>,\n        <span class=\"hljs-attr\">width:</span> <span class=\"hljs-number\">210</span>,\n        <span class=\"hljs-attr\">height:</span> <span class=\"hljs-number\">37</span>,\n        <span class=\"hljs-attr\">verticalAlign:</span> <span class=\"hljs-string\">&#x27;center&#x27;</span>,\n        <span class=\"hljs-attr\">padding:</span> [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">34</span>],\n        <span class=\"hljs-attr\">borderColor:</span> <span class=\"hljs-string\">&#x27;#002732&#x27;</span>,\n        <span class=\"hljs-attr\">borderWidth:</span> <span class=\"hljs-number\">4</span>\n      },\n      <span class=\"hljs-attr\">sLine:</span> {\n        <span class=\"hljs-attr\">fontSize:</span> <span class=\"hljs-number\">13</span>,\n        <span class=\"hljs-attr\">backgroundColor:</span> <span class=\"hljs-string\">&#x27;#01807C&#x27;</span>,\n        <span class=\"hljs-attr\">color:</span> <span class=\"hljs-string\">&#x27;#ffffff&#x27;</span>,\n        <span class=\"hljs-attr\">width:</span> <span class=\"hljs-number\">210</span>,\n        <span class=\"hljs-attr\">height:</span> <span class=\"hljs-number\">37</span>,\n        <span class=\"hljs-attr\">verticalAlign:</span> <span class=\"hljs-string\">&#x27;center&#x27;</span>,\n        <span class=\"hljs-attr\">padding:</span> [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">34</span>],\n        <span class=\"hljs-attr\">borderColor:</span> <span class=\"hljs-string\">&#x27;#024E5A&#x27;</span>,\n        <span class=\"hljs-attr\">borderWidth:</span> <span class=\"hljs-number\">4</span>\n      }\n    }\n  }\n}\n</code></pre>\n<pre class='hljs'><code>\n## 四、给地图添加数据\n默认是 <span class=\"hljs-string\">&#x27;name&#x27;</span>，针对 GeoJSON 要素的自定义属性名称，作为主键用于关联数据点和 GeoJSON 地理要素。\n可以通过`nameProperty`属性进行自定义\n</code></pre>\n{<br/>    nameProperty: &#39;NAME&#39;, // 数据点中的 name：Alabama 会关联到 GeoJSON 中 NAME 属性值为 Alabama 的地理要素{&quot;type&quot;:&quot;Feature&quot;,&quot;id&quot;:&quot;01&quot;,&quot;properties&quot;:{&quot;NAME&quot;:&quot;Alabama&quot;}, &quot;geometry&quot;: { ... }}<br/>    data:[<br/>        {name: &#39;Alabama&#39;, value: 4822023},<br/>        {name: &#39;Alaska&#39;, value: 731449},<br/>    ]<br/>}<pre class='hljs'><code>\n\n## <span class=\"hljs-selector-tag\">Echarts</span> <span class=\"hljs-selector-tag\">API</span> 地址\n&gt; <span class=\"hljs-selector-tag\">https</span>://<span class=\"hljs-selector-tag\">echarts</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.org</span>/<span class=\"hljs-selector-tag\">zh</span>/<span class=\"hljs-selector-tag\">option</span><span class=\"hljs-selector-class\">.html</span><span class=\"hljs-selector-id\">#series-scatter</span><span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.label</span><span class=\"hljs-selector-class\">.rich</span>\n</code></pre>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、地图数据下载",
				"level": 2
			},
			{
				"label": "二、注册地图",
				"level": 2
			}
		],
		"id": 1616163359
	},
	{
		"data": {
			"title": "中云科技网站入口",
			"date": "2021-03-18T16:02:32.000Z",
			"tags": "中云科技"
		},
		"content": "<a id=\"监测云平台\"><h1>监测云平台</h1></a><ul>\n<li>监测云平台监测大屏<blockquote>\n<a href=\"http://pro.zdjcyun.com/user/login\">http://pro.zdjcyun.com/user/login</a></blockquote>\n</li>\n<li>禅道<blockquote>\n<a href=\"http://192.168.10.14:9999/zentao/my/\">http://192.168.10.14:9999/zentao/my/</a></blockquote>\n</li>\n<li>蓝湖<blockquote>\n<a href=\"https://lanhuapp.com/web/#/item?tid=93ec3273-07ba-48ef-82c0-8d747f23b7fc&amp;fid=all\">https://lanhuapp.com/web/#/item?tid=93ec3273-07ba-48ef-82c0-8d747f23b7fc&amp;fid=all</a></blockquote>\n</li>\n<li>gitlab<blockquote>\n<a href=\"http://192.168.10.18:8081/\">http://192.168.10.18:8081/</a></blockquote>\n</li>\n<li>前端jenkins<blockquote>\n<a href=\"http://192.168.10.18:8990/\">http://192.168.10.18:8990/</a></blockquote>\n</li>\n</ul>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "监测云平台",
				"level": 1
			}
		],
		"id": 1616083352
	},
	{
		"data": {
			"title": "echarts基础用法",
			"date": "2021-03-18T15:33:37.000Z",
			"tags": "echarts"
		},
		"content": "<a id=\"echarts\"><h1>echarts</h1></a><a id=\"一、安装与使用\"><h2>一、安装与使用</h2></a>使用命令 <code>npm install echarts --save</code> 进行安装<a id=\"二、示例(在React中使用)\"><h2>二、示例(在React中使用)</h2></a><pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-comment\">// 引入</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> echarts <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;echarts&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> React, { useEffect, useRef } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> initOption = {\n    <span class=\"hljs-attr\">title</span>: {\n        <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;ECharts 入门示例&#x27;</span>\n    },\n    <span class=\"hljs-attr\">tooltip</span>: {},\n    <span class=\"hljs-attr\">xAxis</span>: {\n        <span class=\"hljs-attr\">data</span>: [<span class=\"hljs-string\">&#x27;衬衫&#x27;</span>, <span class=\"hljs-string\">&#x27;羊毛衫&#x27;</span>, <span class=\"hljs-string\">&#x27;雪纺衫&#x27;</span>, <span class=\"hljs-string\">&#x27;裤子&#x27;</span>, <span class=\"hljs-string\">&#x27;高跟鞋&#x27;</span>, <span class=\"hljs-string\">&#x27;袜子&#x27;</span>]\n    },\n    <span class=\"hljs-attr\">yAxis</span>: {},\n    <span class=\"hljs-attr\">series</span>: [{\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;销量&#x27;</span>,\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;bar&#x27;</span>,\n        <span class=\"hljs-attr\">data</span>: [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>]\n    }]\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">EchartsTest</span>(<span class=\"hljs-params\"></span>) </span>{\n\n    <span class=\"hljs-keyword\">const</span> chartsRef = useRef(<span class=\"hljs-literal\">null</span>);\n    useEffect(<span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> myChart = echarts.init(chartsRef.current);\n        myChart.setOption(initOption, <span class=\"hljs-literal\">true</span>);\n    }, [])\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">width:</span> <span class=\"hljs-attr\">200</span>, <span class=\"hljs-attr\">height:</span> <span class=\"hljs-attr\">100</span>}} <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.charts}</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{chartsRef}</span> /&gt;</span></span>\n}\n</code></pre>\n<a id=\"链接\"><h2>链接</h2></a><blockquote>\n<a href=\"https://echarts.apache.org/zh/option.html#title\">https://echarts.apache.org/zh/option.html#title</a></blockquote>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "echarts",
				"level": 1
			},
			{
				"label": "一、安装与使用",
				"level": 2
			},
			{
				"label": "二、示例(在React中使用)",
				"level": 2
			},
			{
				"label": "链接",
				"level": 2
			}
		],
		"id": 1616081617
	},
	{
		"data": {
			"title": "JavaScript(一)参数传递",
			"date": "2021-03-15T17:06:58.000Z",
			"tags": "javascript"
		},
		"content": "<a id=\"一、值传递和引用传递\"><h2>一、值传递和引用传递</h2></a><a id=\"一、值传递\"><h4>一、值传递</h4></a>函数参数如果是原始类型的值（数值、字符串、布尔值），传递方式是传值传递（passes by value）。这意味着，在函数体内修改参数值，不会影响到函数外部。<a id=\"二、引用传递\"><h4>二、引用传递</h4></a>但是，如果函数参数是复合类型的值（数组、对象、其他函数），传递方式是传址传递（pass by reference）。<br/>此时形式参数的值是指向复合类型的地址，在函数中对形式参数重新赋值，形式参数会改变指向，从而指向另一个地址。如果对形式参数的属性进行赋值，则是操作原有对象，将会影响原始值。<blockquote>\n<a href=\"https://github.com/mqyqingfeng/Blog/issues/10\">https://github.com/mqyqingfeng/Blog/issues/10</a></blockquote>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、值传递和引用传递",
				"level": 2
			},
			{
				"label": "一、值传递",
				"level": 4
			},
			{
				"label": "二、引用传递",
				"level": 4
			}
		],
		"id": 1615828018
	},
	{
		"data": {
			"title": "markdown语法",
			"date": "2021-03-13T12:59:59.000Z",
			"tags": "markdown"
		},
		"content": "<a id=\"h1\"><h1>h1</h1></a><a id=\"h2\"><h2>h2</h2></a><a id=\"h3\"><h3>h3</h3></a><a id=\"h4\"><h4>h4</h4></a><a id=\"h5\"><h5>h5</h5></a><a id=\"h6\"><h6>h6</h6></a><blockquote>\n单行引用</blockquote>\n<blockquote>\n多行yin用<blockquote>\n缩进一<blockquote>\n缩进二</blockquote>\n</blockquote>\n</blockquote>\n<del>删除线</del>  <em>斜体</em>  <strong>粗体</strong>  <strong>粗体</strong>  <strong><em>斜粗体</em></strong> <strong><em>斜粗体</em></strong>  上标<sup>2</sup> 下标<sub>2</sub><font face=\"黑体\">黑体</font><br/><font face=\"微软雅黑\">我是微软雅黑</font><br/><font face=\"STCAIYUN\">我是华文彩云</font><br/><font color=red>我是红色</font><br/><font color=#008000>我是绿色</font><br/><font color=Blue>我是蓝色</font><br/><font size=5>尺寸5</font><table>\n<thead>\n<tr>\n<th>表头</th>\n<th>表头</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n</tbody></table>\n<code>行内代码</code><pre class='hljs'><code>代码块\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">do</span> something...\n}\n</code></pre>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> already subject1<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> already subject1.1</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> already subject1.2</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> already subject2</li>\n</ul>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "h1",
				"level": 1
			},
			{
				"label": "h2",
				"level": 2
			},
			{
				"label": "h3",
				"level": 3
			},
			{
				"label": "h4",
				"level": 4
			},
			{
				"label": "h5",
				"level": 5
			},
			{
				"label": "h6",
				"level": 6
			}
		],
		"id": 1615640399
	},
	{
		"data": {
			"title": "WebStorm 常用快捷键",
			"date": "2021-03-12T14:41:22.000Z",
			"tags": "WebStorm"
		},
		"content": "<a id=\"一、文档编辑\"><h2>一、文档编辑</h2></a><ul>\n<li><a id=\"查看当前文件的结构\"><h5>查看当前文件的结构</h5></a><code>ctrl + F12</code></li>\n<li><a id=\"匹配 {} []\"><h5>匹配 {} []</h5></a><code>ctrl + ]/[</code></li>\n<li><a id=\"行移动\"><h5>行移动</h5></a><code>shift + alt + up</code></li>\n<li><a id=\"代码块移动\"><h5>代码块移动</h5></a><code>ctrl + shift + up</code></li>\n<li><a id=\"选中块代码\"><h5>选中块代码</h5></a><code>ctrl + shift + ]/[</code></li>\n<li><a id=\"查找文件\"><h5>查找文件</h5></a><code>ctrl + shift + n</code></li>\n<li><a id=\"替换\"><h5>替换</h5></a><code>ctrl + r</code></li>\n<li><a id=\"查找\"><h5>查找</h5></a><code>ctrl + f</code></li>\n<li><a id=\"快速打开或隐藏工程面板\"><h5>快速打开或隐藏工程面板</h5></a><code>alt + 1</code></li>\n<li><a id=\"删除行  同时进行复制\"><h5>删除行  同时进行复制</h5></a><code>ctrl + x</code></li>\n<li><a id=\"复制行\"><h5>复制行</h5></a><code>ctrl + d</code></li>\n<li><a id=\"切换代码视图窗口\"><h5>切换代码视图窗口</h5></a><code>alt + left/right</code></li>\n<li><a id=\"在方法中快速移动定位\"><h5>在方法中快速移动定位</h5></a><code>alt + up/down</code></li>\n<li><a id=\"选中代码,连续使用逐级向外选中\"><h5>选中代码,连续使用逐级向外选中</h5></a><code>ctrl + w</code></li>\n<li><a id=\"最近打开的文件\"><h5>最近打开的文件</h5></a><code>ctrl + e</code></li>\n<li><a id=\"围绕包裹选中的代码\"><h5>围绕包裹选中的代码</h5></a><code>ctrl + alt + t</code></li>\n<li><a id=\"折叠展开代码块 逐级折叠或逐级展开\"><h5>折叠展开代码块 逐级折叠或逐级展开</h5></a><code>ctrl + -/+</code></li>\n<li><a id=\"折叠展开当前代码块\"><h5>折叠展开当前代码块</h5></a><code>ctrl + .</code></li>\n<li><a id=\"单行注释\"><h5>单行注释</h5></a><code>ctrl + /</code></li>\n</ul>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、文档编辑",
				"level": 2
			},
			{
				"label": "查看当前文件的结构",
				"level": 5
			},
			{
				"label": "匹配 {} []",
				"level": 5
			},
			{
				"label": "行移动",
				"level": 5
			},
			{
				"label": "代码块移动",
				"level": 5
			},
			{
				"label": "选中块代码",
				"level": 5
			},
			{
				"label": "查找文件",
				"level": 5
			},
			{
				"label": "替换",
				"level": 5
			},
			{
				"label": "查找",
				"level": 5
			},
			{
				"label": "快速打开或隐藏工程面板",
				"level": 5
			},
			{
				"label": "删除行  同时进行复制",
				"level": 5
			},
			{
				"label": "复制行",
				"level": 5
			},
			{
				"label": "切换代码视图窗口",
				"level": 5
			},
			{
				"label": "在方法中快速移动定位",
				"level": 5
			},
			{
				"label": "选中代码,连续使用逐级向外选中",
				"level": 5
			},
			{
				"label": "最近打开的文件",
				"level": 5
			},
			{
				"label": "围绕包裹选中的代码",
				"level": 5
			},
			{
				"label": "折叠展开代码块 逐级折叠或逐级展开",
				"level": 5
			},
			{
				"label": "折叠展开当前代码块",
				"level": 5
			},
			{
				"label": "单行注释",
				"level": 5
			}
		],
		"id": 1615560082
	},
	{
		"data": {
			"title": "nginx(一)",
			"date": "2021-03-08T17:19:17.000Z",
			"tags": "nginx"
		},
		"content": "<a id=\"一、基本命令\"><h2>一、基本命令</h2></a><pre class='hljs'><code class=\"language-shell\"><span class=\"hljs-meta\"># 启动</span>\nnginx\n\n<span class=\"hljs-meta\"># 重启</span>\nnginx -s reload\n\n<span class=\"hljs-meta\"># 查看进程号</span>\nps -ef |grep nginx\n\n<span class=\"hljs-meta\"># nginx 服务停止</span>\nnginx -s stop\n</code></pre>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、基本命令",
				"level": 2
			}
		],
		"id": 1615223957
	},
	{
		"data": {
			"title": "git(二) 子仓库",
			"date": "2021-03-02T08:36:31.000Z",
			"tags": "git"
		},
		"content": "<a id=\"一、什么是git子仓库\"><h2>一、什么是git子仓库</h2></a>通俗上的理解, 一个Git仓库下面放了多个其他的Git仓库,其他的Git仓库就是我们父级仓库的子仓库。<a id=\"Git子仓库的两种使用方案\"><h4>Git子仓库的两种使用方案</h4></a><ul>\n<li>1、<code>git submodule</code></li>\n<li>2、<code>git subtree</code></li>\n</ul>\n<a id=\"二、git submodule(子模块)用法\"><h2>二、git submodule(子模块)用法</h2></a><a id=\"一、使用git submodule(子模块)在父仓库中添加子仓库\"><h4>一、使用git submodule(子模块)在父仓库中添加子仓库</h4></a><pre class='hljs'><code class=\"language-shell\"><span class=\"hljs-comment\"># Add a submodule</span>\n<span class=\"hljs-comment\"># &lt;url&gt; git 子仓库的地址</span>\n<span class=\"hljs-comment\"># &lt;path&gt; 本地目录</span>\ngit submodule <span class=\"hljs-keyword\">add</span><span class=\"bash\"> &lt;url&gt; &lt;path&gt;</span>\n</code></pre>\n<a id=\"二、对子仓库进行pull, push\"><h4>二、对子仓库进行pull, push</h4></a><a id=\"1、在府项目的目录下直接使用git submodule foreach\"><h5>1、在府项目的目录下直接使用<code>git submodule foreach</code></h5></a>如果觉得对每个子仓库进行提交繁琐的话,<code>git submodule foreach</code>就可以解决你这个烦恼<pre class='hljs'><code class=\"language-shell\"><span class=\"hljs-meta\"># 主仓库目录下   foreach 后面的git命令就是你对子模块的操作</span>\n<span class=\"hljs-meta\"># 对所有子仓库拉取一次最新代码</span>\ngit submodule <span class=\"hljs-keyword\">foreach</span> git pull\n</code></pre>\n<a id=\"2、进入submodule使用git命令进行操作\"><h5>2、进入submodule使用git命令进行操作</h5></a><a id=\"三、克隆含有子仓库的仓库的两种方式\"><h4>三、克隆含有子仓库的仓库的两种方式</h4></a><a id=\"1、方式一\"><h5>1、方式一</h5></a><pre class='hljs'><code class=\"language-shell\"><span class=\"hljs-comment\"># Git会自动帮我们递归去拉取我们所有的父仓库和子仓库的相关内容。</span>\ngit <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">--recursive</span> git@github.com:tongruixun/toy.git\n</code></pre>\n<a id=\"2、方式二\"><h5>2、方式二</h5></a>首先执行<code>git submodule init</code>用来初始化本地配置文件,也就是向.git/config文件中写入了子模块的信息。<br/><code>git submodule update</code>则是从子仓库中抓取所有的数据找到父级仓库对应的那次子仓库的提交id并且检出到父项目的目录中。<br/>然后查看仓库下的目录结构，此时和提交的目录结构保持一致<pre class='hljs'><code class=\"language-shell\"><span class=\"hljs-meta\"># 克隆父仓库 此时并不会克隆子仓库 仓库中虽然有子仓库文件夹，但文件夹里面是空的。</span>\n<span class=\"hljs-meta\"># 需要运行git submodule的另外两个命令</span>\ngit clone git@github.com:tongruixun/toy.git\n\n<span class=\"hljs-meta\"># 初始化本地配置文件</span>\ngit submodule init\n\n<span class=\"hljs-meta\"># </span>\ngit submodule update\n</code></pre>\n<a id=\"四、删除submodule\"><h4>四、删除submodule</h4></a>git 不支持直接删除submodule需要手动删除对应的文件<br/>进入项目根目录<pre class='hljs'><code class=\"language-shell\"><span class=\"hljs-comment\"># 1、进入项目根目录</span>\ngit <span class=\"hljs-built_in\">rm</span> -<span class=\"hljs-literal\">-cached</span> 子仓库文件名\n\n<span class=\"hljs-comment\"># 2、手动删除相关文件</span>\n\n<span class=\"hljs-built_in\">rm</span> <span class=\"hljs-literal\">-rf</span> 子仓库文件名\n<span class=\"hljs-built_in\">rm</span> .gitmodules\n\n<span class=\"hljs-comment\"># 3、进入 .git/module 删除对应文件</span>\n</code></pre>\n<a id=\"参考链接\"><h2>参考链接</h2></a><blockquote>\n<a href=\"https://zhuanlan.zhihu.com/p/100214931\">https://zhuanlan.zhihu.com/p/100214931</a></blockquote>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、什么是git子仓库",
				"level": 2
			},
			{
				"label": "Git子仓库的两种使用方案",
				"level": 4
			},
			{
				"label": "二、git submodule(子模块)用法",
				"level": 2
			},
			{
				"label": "一、使用git submodule(子模块)在父仓库中添加子仓库",
				"level": 4
			},
			{
				"label": "二、对子仓库进行pull, push",
				"level": 4
			},
			{
				"label": "1、在府项目的目录下直接使用git submodule foreach",
				"level": 5
			},
			{
				"label": "2、进入submodule使用git命令进行操作",
				"level": 5
			},
			{
				"label": "三、克隆含有子仓库的仓库的两种方式",
				"level": 4
			},
			{
				"label": "1、方式一",
				"level": 5
			},
			{
				"label": "2、方式二",
				"level": 5
			},
			{
				"label": "四、删除submodule",
				"level": 4
			},
			{
				"label": "参考链接",
				"level": 2
			}
		],
		"id": 1614674191
	},
	{
		"data": {
			"title": "自定义博客(二) trx命令的用法",
			"date": "2021-02-28T11:44:55.000Z",
			"tags": "blog"
		},
		"content": "<a id=\"一、创建文章\"><h2>一、创建文章</h2></a><pre class='hljs'><code class=\"language-bash\"> trx new &lt;<span class=\"hljs-built_in\">title</span>&gt; [<span class=\"hljs-built_in\">dir</span>] [configPath]\n # 等价于 trx n &lt;<span class=\"hljs-built_in\">title</span>&gt; [<span class=\"hljs-built_in\">dir</span>] [configPath]\n # <span class=\"hljs-built_in\">title</span> 必需 文章标题\n # <span class=\"hljs-built_in\">dir</span> 可选 所在目录\n # configPath 可选 配置文件所在路径\n</code></pre>\n<a id=\"二、文件生成\"><h2>二、文件生成</h2></a><pre class='hljs'><code class=\"language-bash\">trx <span class=\"hljs-keyword\">generate</span> [configPath]\n# 等价于 trx g [configPath]\n# configPath 可选 配置文件所在路径\n</code></pre>\n<a id=\"三、配置文件\"><h2>三、配置文件</h2></a>根目录下的_config.yaml文件，将解析<code>source_dir</code>目录下的位于<code>posts_dir</code>中的所有markdown文件包括子目录中的文件。<br/>解析成json格式的数据保存在<code>datasource_dir</code>中，<code>posts_db_name</code>中存放文章数据，<br/><code>config_db_name</code>中存放<code>_config.yaml</code>的数据<pre class='hljs'><code class=\"language-yaml\"><span class=\"hljs-meta\"># 链接图标</span>\n<span class=\"hljs-symbol\">subNav:</span>\n<span class=\"hljs-symbol\">  github:</span> <span class=\"hljs-string\">&quot;https://gihub.com/tongruixun&quot;</span>\n<span class=\"hljs-symbol\">  gitee:</span> <span class=\"hljs-string\">&quot;https://gitee.com/tongruixun&quot;</span>\n<span class=\"hljs-symbol\">  weixin:</span> <span class=\"hljs-meta\">#</span>\n<span class=\"hljs-symbol\">  qq:</span> <span class=\"hljs-meta\">#</span>\n<span class=\"hljs-symbol\">  bilibili:</span> <span class=\"hljs-meta\">#</span>\n<span class=\"hljs-symbol\">  zhifubao:</span> <span class=\"hljs-meta\">#</span>\n  Gitlab-fill: <span class=\"hljs-meta\">#</span>\n  yuque-fill: <span class=\"hljs-meta\">#</span>\n<span class=\"hljs-symbol\">  twitter:</span> <span class=\"hljs-meta\">#</span>\n<span class=\"hljs-symbol\">  weibo:</span> <span class=\"hljs-meta\">#</span>\n<span class=\"hljs-symbol\">  zhihu:</span> <span class=\"hljs-meta\">#</span>\n<span class=\"hljs-symbol\">  email:</span> <span class=\"hljs-meta\">#</span>\n<span class=\"hljs-symbol\">  juejin:</span> <span class=\"hljs-meta\">#</span>\n\n<span class=\"hljs-meta\"># Directory</span>\n<span class=\"hljs-symbol\">source_dir:</span> source  <span class=\"hljs-meta\"># 资源文件夹</span>\n<span class=\"hljs-symbol\">posts_dir:</span> _posts   <span class=\"hljs-meta\"># 文章所在路径</span>\n<span class=\"hljs-symbol\">\ntemplate_dir:</span> template <span class=\"hljs-meta\"># 模板文件目录</span>\n<span class=\"hljs-symbol\">post_template:</span> post.md <span class=\"hljs-meta\"># 文章模板</span>\n\n<span class=\"hljs-meta\"># Writing</span>\n<span class=\"hljs-symbol\">datasource_dir:</span> src/db <span class=\"hljs-meta\"># 数据写入的目录</span>\n<span class=\"hljs-symbol\">posts_db_name:</span> posts.json <span class=\"hljs-meta\"># 文章数据写入的文件名</span>\n<span class=\"hljs-symbol\">config_db_name:</span> config.json <span class=\"hljs-meta\"># 配置文件数据写入的文件名</span>\n</code></pre>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、创建文章",
				"level": 2
			},
			{
				"label": "二、文件生成",
				"level": 2
			},
			{
				"label": "三、配置文件",
				"level": 2
			}
		],
		"id": 1614512695
	},
	{
		"data": {
			"title": "CSS 滚动条样式优化及相关属性",
			"date": "2021-02-26T14:21:03.000Z",
			"tags": "css"
		},
		"content": "<a id=\"一、滚动条伪元素\"><h2>一、滚动条伪元素</h2></a><a id=\"一、webkit内核下的滚动条伪元素（使用在支持webkit的浏览器上如Chrome和Safari）\"><h4>一、webkit内核下的滚动条伪元素（使用在支持webkit的浏览器上如Chrome和Safari）</h4></a><pre class='hljs'><code class=\"language-css\"><span class=\"hljs-regexp\">/* 整个滚动条 */</span>\n::-webkit-scrollbar\n<span class=\"hljs-regexp\">/* 滚动条上的按钮 (上下箭头) */</span>\n::-webkit-scrollbar-button\n<span class=\"hljs-regexp\">/* 滚动条上的滚动滑块 */</span>\n::-webkit-scrollbar-thumb\n<span class=\"hljs-regexp\">/* 滚动条轨道 */</span>\n::-webkit-scrollbar-track\n<span class=\"hljs-regexp\">/* 滚动条没有滑块的轨道部分 */</span>\n::-webkit-scrollbar-track-piece\n<span class=\"hljs-regexp\">/* 当同时有垂直滚动条和水平滚动条时交汇的部分 */</span>\n::-webkit-scrollbar-corner\n</code></pre>\n<a id=\"参考链接\"><h2>参考链接</h2></a><blockquote>\n<a href=\"https://juejin.cn/post/6844904078296743943\">https://juejin.cn/post/6844904078296743943</a></blockquote>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、滚动条伪元素",
				"level": 2
			},
			{
				"label": "一、webkit内核下的滚动条伪元素（使用在支持webkit的浏览器上如Chrome和Safari）",
				"level": 4
			},
			{
				"label": "参考链接",
				"level": 2
			}
		],
		"id": 1614349263
	},
	{
		"data": {
			"title": "npm(三) npm link",
			"date": "2021-02-25T15:50:15.000Z",
			"tags": "npm"
		},
		"content": "<a id=\"一、npm link介绍及使用\"><h2>一、<code>npm link</code>介绍及使用</h2></a><a id=\"一、介绍\"><h4>一、介绍</h4></a>npm link用来在本地项目和本地npm模块之间建立连接，可以在本地进行模块测试<a id=\"二、用法\"><h4>二、用法</h4></a><pre class='hljs'><code class=\"language-bash\"><span class=\"hljs-comment\"># 1、项目和模块在同一个目录下，可以使用相对路径</span>\n<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">link</span> ../module\n<span class=\"hljs-comment\"># 2、项目和模块不在同一个目录下</span>\n<span class=\"hljs-comment\"># 在模块目录下使用 node link ,全局link</span>\n<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">link</span>\n<span class=\"hljs-comment\"># 到使用模块的项目目录下</span>\n<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">link</span> modulename\n<span class=\"hljs-comment\"># 3、 解除link</span>\n<span class=\"hljs-comment\"># 解除项目与模块link, 在项目目录下</span>\n<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">unlink</span> modulename\n<span class=\"hljs-comment\"># 解除全局link ,在模块目录下</span>\n<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">unlink</span> modulename\n</code></pre>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、npm link介绍及使用",
				"level": 2
			},
			{
				"label": "一、介绍",
				"level": 4
			},
			{
				"label": "二、用法",
				"level": 4
			}
		],
		"id": 1614268215
	},
	{
		"data": {
			"title": "npm(二) 自定义命令行工具",
			"date": "2021-02-05T10:06:51.000Z",
			"tags": [
				"npm",
				"cli",
				"node"
			]
		},
		"content": "<a id=\"一、新建一个目录\"><h2>一、新建一个目录</h2></a><a id=\"一、执行 npm init\"><h4>一、执行 <code>npm init</code></h4></a><a id=\"二、 安装 commander\"><h4>二、 安装 <code>commander</code></h4></a><pre class='hljs'><code class=\"language-shell\"><span class=\"hljs-comment\"># -S  等同于 --save</span>\n<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">install</span> commander -S\n</code></pre>\n<a id=\"二、目录结构\"><h2>二、目录结构</h2></a>目录结构可以按照自己的需求随意更改，只需在使用的地方符合路径查找规则<pre class='hljs'><code class=\"language-yaml\">trx-cli  #项目目录 \n -<span class=\"ruby\"> bin  <span class=\"hljs-comment\"># 指令目录</span>\n</span>  -<span class=\"ruby\"> index.js\n</span> -<span class=\"ruby\"> lib  <span class=\"hljs-comment\"># 指令对应的执行函数</span>\n</span>  -<span class=\"ruby\"> index.js\n</span> -<span class=\"ruby\"> package.json</span>\n</code></pre>\n<a id=\"一、package.json的内容\"><h4>一、package.json的内容</h4></a>bin中的key(trx)是你的指令，对应的值(bin/index.js)是要执行的文件<pre class='hljs'><code class=\"language-json\">{\n  <span class=\"hljs-attr\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;tong-cli&quot;</span>,\n  <span class=\"hljs-attr\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;0.0.4&quot;</span>,\n  <span class=\"hljs-attr\">&quot;description&quot;</span>: <span class=\"hljs-string\">&quot;a cli util&quot;</span>,\n  <span class=\"hljs-attr\">&quot;main&quot;</span>: <span class=\"hljs-string\">&quot;bin/index.js&quot;</span>,\n  <span class=\"hljs-attr\">&quot;bin&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;trx&quot;</span>: <span class=\"hljs-string\">&quot;bin/index.js&quot;</span>\n  },\n  <span class=\"hljs-attr\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;test&quot;</span>: <span class=\"hljs-string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>\n  }\n}\n</code></pre>\n<a id=\"二、bin/index.js的内容\"><h4>二、bin/index.js的内容</h4></a><pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-meta\">#!/usr/bin/env node</span>\n<span class=\"hljs-keyword\">const</span> program = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;commander&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> {init} = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;../lib&#x27;</span>);\nprogram\n    .version(<span class=\"hljs-string\">&#x27;0.0.1&#x27;</span>)\n    .command(<span class=\"hljs-string\">&#x27;init&#x27;</span>)\n    .alias(<span class=\"hljs-string\">&#x27;i&#x27;</span>)\n    .description(<span class=\"hljs-string\">&#x27;build init views&#x27;</span>)\n    .action(init);\n\nprogram.parse(process.argv);\n</code></pre>\n<a id=\"三、lib/index.js的内容\"><h4>三、lib/index.js的内容</h4></a><pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">init</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;this is trx-cli&#x27;</span>);\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;__dirname&#x27;</span>, __dirname);\n}\n\n<span class=\"hljs-built_in\">module</span>.exports.init = init;\n</code></pre>\n<a id=\"三、用法\"><h2>三、用法</h2></a><a id=\"一、上传到npm仓库，在其他项目中安装就可以使用.用法:trx init\"><h4>一、上传到npm仓库，在其他项目中安装就可以使用.用法:<code>trx init</code></h4></a><pre class='hljs'><code class=\"language-shell\"><span class=\"hljs-meta\"># 输入</span>\ntrx init\n\n<span class=\"hljs-meta\"># 结果</span>\n<span class=\"hljs-string\">&#x27;this is trx-cli&#x27;</span>\n<span class=\"hljs-string\">&#x27;__dirname&#x27;</span>, D:\\tongruixun\\GithubRepository\\toy\n</code></pre>\n<a id=\"二、 使用node指令，例如:在本项目中的用法是 node bin/index init\"><h4>二、 使用node指令，例如:在本项目中的用法是 <code>node bin/index init</code></h4></a><a id=\"二、如果想在本模块中使用可以运行 npm link 建立符号链接， 运行npm link就可以直接使用了用法:trx init\"><h4>二、如果想在本模块中使用可以运行 <code>npm link</code> 建立符号链接， 运行<code>npm link</code>就可以直接使用了用法:<code>trx init</code></h4></a><a id=\"四、commander的用法\"><h2>四、commander的用法</h2></a><a id=\"一、option用于定义命令选项\"><h4>一、option用于定义命令选项</h4></a><a id=\"一、.option('-n, --name', 'description', 'defaultValue')\"><h5>一、.option(&#39;-n, --name&#39;, &#39;description&#39;, &#39;defaultValue&#39;)</h5></a>第一个参数必填,是自定义标识,分为长短标识，用逗号隔开 后面可定义参数, 必填参数使用&lt;&gt;,选填参数使用[]<br/>第二个参数选填,对标识的描述，使用--help命令时显示的内容<br/>第三个参数选填,表示默认值第三个参数可以是函数（此时第四个值是默认值），此函数接受两个参数：命令行的输入值和选项的默认值，函数的返回值为最终的解析结果<a id=\"二、用法\"><h5>二、用法</h5></a>1、添加选项<pre class='hljs'><code class=\"language-javascript\">const program = require(<span class=\"hljs-string\">&#x27;commander&#x27;</span>);\n\nprogram.version(<span class=\"hljs-string\">&#x27;0.0.1&#x27;</span>);\n// 没有默认值时 命令后加上选项 <span class=\"hljs-keyword\">debug</span>值为<span class=\"hljs-keyword\">true</span>, 不加时为<span class=\"hljs-keyword\">false</span>或underfined\n// 有默认值时 命令后加上选项 <span class=\"hljs-keyword\">debug</span>值为默认值, 不加时为<span class=\"hljs-keyword\">false</span>或underfined\n// 有默认值时,且添加可选参数 命令后加或不加选项 <span class=\"hljs-keyword\">debug</span>值均为默认值\nprogram.<span class=\"hljs-keyword\">option</span>(<span class=\"hljs-string\">&#x27;-d, --debug&#x27;</span>, <span class=\"hljs-string\">&#x27;output extra debugging&#x27;</span>)\n</code></pre>\n2、option可以链式添加<pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-comment\">// -ds 等价于 -d -s </span>\nprogram\n    .<span class=\"hljs-keyword\">option</span>(<span class=\"hljs-string\">&#x27;-d, --debug&#x27;</span>, <span class=\"hljs-string\">&#x27;output extra debugging&#x27;</span>)\n    .<span class=\"hljs-keyword\">option</span>(<span class=\"hljs-string\">&#x27;-s, --small&#x27;</span>, <span class=\"hljs-string\">&#x27;small pizza size&#x27;</span>)\n    .<span class=\"hljs-keyword\">option</span>(<span class=\"hljs-string\">&#x27;-p, --pizza-type &lt;type&gt;&#x27;</span>, <span class=\"hljs-string\">&#x27;flavour of pizza&#x27;</span>);\n</code></pre>\n3、选项前加 <code>no-</code><pre class='hljs'><code class=\"language-javascript\">// 含义与之前相反  加上选项 <span class=\"hljs-keyword\">debug</span>为<span class=\"hljs-keyword\">false</span> 不加反而为<span class=\"hljs-keyword\">true</span>\nprogram.<span class=\"hljs-keyword\">option</span>(<span class=\"hljs-string\">&#x27;-d, --no-debug&#x27;</span>, <span class=\"hljs-string\">&#x27;output extra debugging&#x27;</span>)\n</code></pre>\n<a id=\"二、command添加命令名称\"><h4>二、command添加命令名称</h4></a><pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-comment\">// 引入依赖</span>\n<span class=\"hljs-keyword\">var</span> program = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;commander&#x27;</span>);\n<span class=\"hljs-comment\">// Command implemented using action handler (description is supplied separately to `.command`)</span>\n<span class=\"hljs-comment\">// Returns new command for configuring.</span>\nprogram\n  .command(<span class=\"hljs-string\">&#x27;clone &lt;source&gt; [destination]&#x27;</span>)\n  .description(<span class=\"hljs-string\">&#x27;clone a repository into a newly created directory&#x27;</span>)\n  .action(<span class=\"hljs-function\">(<span class=\"hljs-params\">source, destination</span>) =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;clone command called&#x27;</span>);\n  });\n\n<span class=\"hljs-comment\">// Command implemented using stand-alone executable file (description is second parameter to `.command`)</span>\n<span class=\"hljs-comment\">// Returns `this` for adding more commands.</span>\nprogram\n  .command(<span class=\"hljs-string\">&#x27;start &lt;service&gt;&#x27;</span>, <span class=\"hljs-string\">&#x27;start named service&#x27;</span>)\n  .command(<span class=\"hljs-string\">&#x27;stop [service]&#x27;</span>, <span class=\"hljs-string\">&#x27;stop named service, or all if no name supplied&#x27;</span>);\n</code></pre>\n<a id=\"三、action\"><h4>三、action</h4></a>action接收一个函数，函数前面的参数与命令的参数一一对应，最后一个参数为选项对象的值<pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-selector-tag\">program</span>\n    <span class=\"hljs-selector-class\">.command</span>(<span class=\"hljs-string\">&#x27;deploy [param1] [param2]&#x27;</span>)\n    <span class=\"hljs-selector-class\">.alias</span>(<span class=\"hljs-string\">&#x27;d&#x27;</span>)\n    <span class=\"hljs-selector-class\">.option</span>(<span class=\"hljs-string\">&#x27;-r, --recursive [name]&#x27;</span>, <span class=\"hljs-string\">&#x27;Remove recursively&#x27;</span>)\n    <span class=\"hljs-selector-class\">.description</span>(<span class=\"hljs-string\">&#x27;deploy&#x27;</span>)\n    <span class=\"hljs-selector-class\">.action</span>(function (param1, param2, dir) {\n        <span class=\"hljs-selector-tag\">console</span><span class=\"hljs-selector-class\">.log</span>(param1)\n        <span class=\"hljs-selector-tag\">console</span><span class=\"hljs-selector-class\">.log</span>(param2)\n        <span class=\"hljs-selector-tag\">console</span><span class=\"hljs-selector-class\">.log</span>(dir)\n    });\n\n<span class=\"hljs-comment\">// 输入 指令名 d param1 param2 -r name</span>\n<span class=\"hljs-comment\">// 输出 param1 param2 {recursive: name}</span>\n</code></pre>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、新建一个目录",
				"level": 2
			},
			{
				"label": "一、执行 npm init",
				"level": 4
			},
			{
				"label": "二、 安装 commander",
				"level": 4
			},
			{
				"label": "二、目录结构",
				"level": 2
			},
			{
				"label": "一、package.json的内容",
				"level": 4
			},
			{
				"label": "二、bin/index.js的内容",
				"level": 4
			},
			{
				"label": "三、lib/index.js的内容",
				"level": 4
			},
			{
				"label": "三、用法",
				"level": 2
			},
			{
				"label": "一、上传到npm仓库，在其他项目中安装就可以使用.用法:trx init",
				"level": 4
			},
			{
				"label": "二、 使用node指令，例如:在本项目中的用法是 node bin/index init",
				"level": 4
			},
			{
				"label": "二、如果想在本模块中使用可以运行 npm link 建立符号链接， 运行npm link就可以直接使用了用法:trx init",
				"level": 4
			},
			{
				"label": "四、commander的用法",
				"level": 2
			},
			{
				"label": "一、option用于定义命令选项",
				"level": 4
			},
			{
				"label": "一、.option('-n, --name', 'description', 'defaultValue')",
				"level": 5
			},
			{
				"label": "二、用法",
				"level": 5
			},
			{
				"label": "二、command添加命令名称",
				"level": 4
			},
			{
				"label": "三、action",
				"level": 4
			}
		],
		"id": 1612519611
	},
	{
		"data": {
			"title": "less(一) css预处理器",
			"date": "2021-02-03T10:29:49.000Z",
			"tags": "less"
		},
		"content": "<a id=\"一、安装\"><h2>一、安装</h2></a><a id=\"一、安装less\"><h4>一、安装less</h4></a><pre class='hljs'><code class=\"language-bash\"><span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">install</span> less --save-dev\n</code></pre>\n<a id=\"二、安装less-loader\"><h4>二、安装less-loader</h4></a><pre class='hljs'><code class=\"language-bash\"><span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">install</span> less-loader --save-dev\n</code></pre>\n<a id=\"二、基本用法\"><h2>二、基本用法</h2></a><pre class='hljs'><code class=\"language-less\"><span class=\"hljs-comment\">// 变量定义</span>\n<span class=\"hljs-variable\">@width:</span> <span class=\"hljs-number\">96px</span>;\n<span class=\"hljs-variable\">@color:</span> <span class=\"hljs-number\">#0f59a4</span>;\n\n<span class=\"hljs-comment\">// 嵌套语法</span>\n<span class=\"hljs-selector-class\">.pagination</span> {\n  <span class=\"hljs-attribute\">display</span>: flex;\n  <span class=\"hljs-attribute\">justify-content</span>: space-between;\n  <span class=\"hljs-attribute\">align-items</span>: center;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">48px</span> <span class=\"hljs-number\">24px</span>;\n  <span class=\"hljs-selector-class\">.pageIcon</span> {\n    <span class=\"hljs-attribute\">flex-basis</span>: <span class=\"hljs-variable\">@width</span>;  <span class=\"hljs-comment\">// 变量使用</span>\n    <span class=\"hljs-comment\">// 全局变量  用于修改原有的css样式</span>\n    <span class=\"hljs-selector-pseudo\">:global</span> {\n      <span class=\"hljs-selector-class\">.iconfont</span> {\n        <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">48px</span>;\n        <span class=\"hljs-attribute\">cursor</span>: pointer;\n        <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#737c7b</span>;\n\n        <span class=\"hljs-selector-tag\">&amp;</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n          <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-variable\">@color</span>; <span class=\"hljs-comment\">// 变量使用</span>\n        }\n      }\n    }\n  }\n  <span class=\"hljs-selector-class\">.num</span> {\n    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">24px</span>;\n    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-variable\">@color</span>; <span class=\"hljs-comment\">// 变量使用</span>\n  }\n}\n</code></pre>\n<a id=\"三、使用webpack5，配置文件如下\"><h2>三、使用webpack5，配置文件如下</h2></a><pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-regexp\">//</span> \nmodule.exports = {\n    ...,\n    module: {\n        rules: [\n            {\n                test: <span class=\"hljs-regexp\">/\\.less$/i</span>, <span class=\"hljs-regexp\">//</span> 匹配.less结尾的文件，交给webpack处理\n                exclude: <span class=\"hljs-regexp\">/node_modules/</span>, <span class=\"hljs-regexp\">//</span> 排除node_modules下的文件\n                use: [\n                    <span class=\"hljs-string\">&#x27;style-loader&#x27;</span>,\n                    {\n                        loader: <span class=\"hljs-string\">&quot;css-loader&quot;</span>,\n                        options: {\n                            modules: {\n                                compileType: <span class=\"hljs-string\">&quot;module&quot;</span>,  <span class=\"hljs-regexp\">//</span> 开启支持css模块\n                                localIdentName: <span class=\"hljs-string\">&quot;[path][name]__[local]&quot;</span>\n                            }\n                        }\n                    },{\n                        loader: <span class=\"hljs-string\">&quot;less-loader&quot;</span>,\n                    }\n                ]\n            }\n        ]\n    },\n    ...\n}\n</code></pre>\n<a id=\"四、使用别名一个less文件引用另一个less文件\"><h2>四、使用别名一个less文件引用另一个less文件</h2></a><a id=\"一、webpack配置\"><h4>一、webpack配置</h4></a><pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-regexp\">//</span> __dirname 表示当前文件所在的绝对路径\nmodule.exports = {\n    resolve: {\n        extensions: [<span class=\"hljs-string\">&quot;*&quot;</span>, <span class=\"hljs-string\">&quot;.js&quot;</span>, <span class=\"hljs-string\">&quot;.jsx&quot;</span>, <span class=\"hljs-string\">&quot;less&quot;</span>], <span class=\"hljs-regexp\">//</span> 配置后可以省略后缀进行引入\n        alias: {\n            <span class=\"hljs-string\">&#x27;@&#x27;</span>: path.resolve(__dirname, <span class=\"hljs-string\">&#x27;src&#x27;</span>), <span class=\"hljs-regexp\">//</span> \n            <span class=\"hljs-string\">&#x27;styles&#x27;</span> : path.join(__dirname, <span class=\"hljs-string\">&#x27;src/styles&#x27;</span>)\n        }\n    }\n}\n</code></pre>\n<a id=\"二、用法\"><h4>二、用法</h4></a>在目标文件中引入src/styles下的animation.less，注意:在前面加入 ~ <pre class='hljs'><code class=\"language-less\"><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&#x27;~styles/animation.less&#x27;</span>;\n\n\n  // ..<span class=\"hljs-selector-class\">.something</span>\n</code></pre>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、安装",
				"level": 2
			},
			{
				"label": "一、安装less",
				"level": 4
			},
			{
				"label": "二、安装less-loader",
				"level": 4
			},
			{
				"label": "二、基本用法",
				"level": 2
			},
			{
				"label": "三、使用webpack5，配置文件如下",
				"level": 2
			},
			{
				"label": "四、使用别名一个less文件引用另一个less文件",
				"level": 2
			},
			{
				"label": "一、webpack配置",
				"level": 4
			},
			{
				"label": "二、用法",
				"level": 4
			}
		],
		"id": 1612348189
	},
	{
		"data": {
			"title": "npm(一) npm模块开发与发布",
			"date": "2021-01-28T09:33:07.000Z",
			"tags": "npm"
		},
		"content": "<a id=\"一、创建目录、初始化、开发模块、发布模块\"><h2>一、创建目录、初始化、开发模块、发布模块</h2></a><a id=\"一、创建一个目录\"><h4>一、创建一个目录</h4></a><a id=\"二、在目录下执行 npm init (默认已安装node环境)\"><h4>二、在目录下执行 <code>npm init</code> (默认已安装node环境)</h4></a><pre class='hljs'><code class=\"language-bash\">D:\\tongruixun\\GithubRepository\\trx-util&gt;<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">init</span>\n</code></pre>\n<!--more-->\n\n<a id=\"三、创建index.js\"><h4>三、创建<code>index.js</code></h4></a><pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-regexp\">//</span> 声明一个函数\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-keyword\">func</span>() {\n    <span class=\"hljs-regexp\">//</span> dosomething...\n}\n\n<span class=\"hljs-regexp\">//</span> 导出模块   \nmodule.exports.<span class=\"hljs-keyword\">func</span> = <span class=\"hljs-keyword\">func</span>;\n</code></pre>\n<a id=\"四、发布到npm\"><h4>四、发布到npm</h4></a>到<code>https://www.npmjs.com</code>注册账号,记住自己的账号，密码，邮箱。<pre class='hljs'><code class=\"language-bash\"><span class=\"hljs-comment\">// 登录  本地模块文件</span>\n<span class=\"hljs-attribute\">D</span>:\\tongruixun\\GithubRepository\\trx-util&gt;node adduser\n<span class=\"hljs-attribute\">Username</span>: tongruixun\n<span class=\"hljs-attribute\">Password</span>:\n<span class=\"hljs-attribute\">Email</span>: (this IS public) <span class=\"hljs-number\">1</span>*****<span class=\"hljs-number\">4342</span><span class=\"hljs-variable\">@qq</span>.com\nLogged in as tongruixun on <span class=\"hljs-attribute\">https</span>:<span class=\"hljs-comment\">//registry.npmjs.org/.</span>\n\n<span class=\"hljs-comment\">// 查看登录用户</span>\n<span class=\"hljs-attribute\">D</span>:\\tongruixun\\GithubRepository\\trx-util&gt;node whoami\ntongruixun\n\n<span class=\"hljs-comment\">// 发布模块到npm</span>\n<span class=\"hljs-attribute\">D</span>:\\tongruixun\\GithubRepository\\trx-util&gt;node publish\n\n</code></pre>\n<a id=\"五、更新npm模块版本\"><h4>五、更新npm模块版本</h4></a>在<code>package.json</code>中修改version字段，然后执行 <code>npm publish</code>版本号没有修改的话会报错版本格式：主版本号.次版本号.修订号，版本号递增规则如下：<ul>\n<li>主版本号：当你做了不兼容的 API 修改</li>\n<li>次版本号：当你做了向下兼容的功能性新增</li>\n<li>修订号：当你做了向下兼容的问题修正</li>\n</ul>\n<a id=\"二、使用\"><h2>二、使用</h2></a><a id=\"一、安装\"><h4>一、安装</h4></a><pre class='hljs'><code class=\"language-bash\"><span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">install</span> trx-util\n</code></pre>\n<a id=\"二、使用\"><h4>二、使用</h4></a><pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> trxUtil = requier(<span class=\"hljs-string\">&#x27;trx-util&#x27;</span>)<span class=\"hljs-comment\">;</span>\n\ntrxUtil.<span class=\"hljs-keyword\">func</span>()<span class=\"hljs-comment\">;</span>\n</code></pre>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、创建目录、初始化、开发模块、发布模块",
				"level": 2
			},
			{
				"label": "一、创建一个目录",
				"level": 4
			},
			{
				"label": "二、在目录下执行 npm init (默认已安装node环境)",
				"level": 4
			},
			{
				"label": "三、创建index.js",
				"level": 4
			},
			{
				"label": "四、发布到npm",
				"level": 4
			},
			{
				"label": "五、更新npm模块版本",
				"level": 4
			},
			{
				"label": "二、使用",
				"level": 2
			},
			{
				"label": "一、安装",
				"level": 4
			},
			{
				"label": "二、使用",
				"level": 4
			}
		],
		"id": 1611826387
	},
	{
		"data": {
			"title": "webpack(一) 安装与使用",
			"date": "2021-01-27T10:56:30.000Z",
			"tags": "webpack"
		},
		"content": "<a id=\"一、安装\"><h2>一、安装</h2></a><pre class='hljs'><code class=\"language-bash\"> <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">install</span> webpack webpack-cli --save-dev\n</code></pre>\n<a id=\"二、基本配置\"><h2>二、基本配置</h2></a><pre class='hljs'><code class=\"language-javascript\">const path = require(<span class=\"hljs-string\">&#x27;path&#x27;</span>);\nconst HtmlWebpackPlugin = require(<span class=\"hljs-string\">&#x27;html-webpack-plugin&#x27;</span>)\n\nmodule.exports = {\n    entry: <span class=\"hljs-string\">&#x27;./src/index.js&#x27;</span>,\n    output: {\n        filename: <span class=\"hljs-string\">&#x27;main.js&#x27;</span>,\n        path: path.resolve(__dirname, <span class=\"hljs-string\">&#x27;public&#x27;</span>)\n    },\n    module: {\n      rules: [\n          {\n              test: <span class=\"hljs-regexp\">/\\.css$/i</span>,\n              use: [<span class=\"hljs-string\">&#x27;style-loader&#x27;</span>, <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>]\n          },{\n              test: <span class=\"hljs-regexp\">/(\\.js?|\\.jsx?)$/i</span>, <span class=\"hljs-regexp\">//</span> 排除JSON文件\n              use: <span class=\"hljs-string\">&#x27;babel-loader&#x27;</span>,\n              exclude: <span class=\"hljs-regexp\">/node_modules/</span>,\n          },\n      ]\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: <span class=\"hljs-string\">&quot;src/index.html&quot;</span>  <span class=\"hljs-regexp\">//</span> 以src下的HTML为模板创建打包后的index.html\n            <span class=\"hljs-regexp\">//</span> favicon: path.resolve(<span class=\"hljs-string\">&#x27;src/asset/favicon.ico&#x27;</span>)  <span class=\"hljs-regexp\">//</span> 设置网站图标\n        })\n    ],\n    mode: <span class=\"hljs-string\">&quot;development&quot;</span>\n}\n</code></pre>\n<a id=\"三、清理输出文件夹 clean-webpack-plugin\"><h2>三、清理输出文件夹 <code>clean-webpack-plugin</code></h2></a><a id=\"一、clean-webpack-plugin的用法，版本号3.0.0\"><h4>一、<code>clean-webpack-plugin</code>的用法，版本号3.0.0</h4></a><pre class='hljs'><code><span class=\"hljs-regexp\">//</span> 一、安装\nnpm install clean-webpack-plugin -S\n<span class=\"hljs-regexp\">//</span> 二、配置\nplugins: [\n    new CleanWebpackPlugin()\n]\n</code></pre>\n<a id=\"二、Options and Defaults(Optional)\"><h4>二、Options and Defaults(Optional)</h4></a><pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-selector-tag\">new</span> <span class=\"hljs-selector-tag\">CleanWebpackPlugin</span>({\n    <span class=\"hljs-comment\">// Simulate the removal of files</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// default: false</span>\n    <span class=\"hljs-attribute\">dry</span>: true,\n \n    <span class=\"hljs-comment\">// Write Logs to Console</span>\n    <span class=\"hljs-comment\">// (Always enabled when dry is true)</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// default: false</span>\n    <span class=\"hljs-attribute\">verbose</span>: true,\n \n    <span class=\"hljs-comment\">// Automatically remove all unused webpack assets on rebuild</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// default: true</span>\n    <span class=\"hljs-attribute\">cleanStaleWebpackAssets</span>: false,\n \n    <span class=\"hljs-comment\">// Do not allow removal of current webpack assets</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// default: true</span>\n    <span class=\"hljs-attribute\">protectWebpackAssets</span>: false,\n \n    <span class=\"hljs-comment\">// **WARNING**</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// Notes for the below options:</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// They are unsafe...so test initially with dry: true.</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// Relative to webpack&#x27;s output.path directory.</span>\n    <span class=\"hljs-comment\">// If outside of webpack&#x27;s output.path directory,</span>\n    <span class=\"hljs-comment\">//    use full path. path.join(process.cwd(), &#x27;build/**/*&#x27;)</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// These options extend del&#x27;s pattern matching API.</span>\n    <span class=\"hljs-comment\">// See https://github.com/sindresorhus/del#patterns</span>\n    <span class=\"hljs-comment\">//    for pattern matching documentation</span>\n \n    <span class=\"hljs-comment\">// Removes files once prior to Webpack compilation</span>\n    <span class=\"hljs-comment\">//   Not included in rebuilds (watch mode)</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// Use !negative patterns to exclude files</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// default: [&#x27;**/*&#x27;]</span>\n    <span class=\"hljs-attribute\">cleanOnceBeforeBuildPatterns</span>: [<span class=\"hljs-string\">&#x27;**/*&#x27;</span>, <span class=\"hljs-string\">&#x27;!static-files*&#x27;</span>],\n    <span class=\"hljs-attribute\">cleanOnceBeforeBuildPatterns</span>: [], <span class=\"hljs-comment\">// disables cleanOnceBeforeBuildPatterns</span>\n \n    <span class=\"hljs-comment\">// Removes files after every build (including watch mode) that match this pattern.</span>\n    <span class=\"hljs-comment\">// Used for files that are not created directly by Webpack.</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// Use !negative patterns to exclude files</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// default: []</span>\n    <span class=\"hljs-attribute\">cleanAfterEveryBuildPatterns</span>: [<span class=\"hljs-string\">&#x27;static*.*&#x27;</span>, <span class=\"hljs-string\">&#x27;!static1.js&#x27;</span>],\n \n    <span class=\"hljs-comment\">// Allow clean patterns outside of process.cwd()</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// requires dry option to be explicitly set</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// default: false</span>\n    <span class=\"hljs-attribute\">dangerouslyAllowCleanPatternsOutsideProject</span>: true,\n});\n</code></pre>\n<a id=\"问题及解决方案\"><h2>问题及解决方案</h2></a><pre class='hljs'><code>\n<span class=\"hljs-comment\">## 参考链接</span>\n\n&gt; https:<span class=\"hljs-regexp\">//</span>webpack.docschina.org<span class=\"hljs-regexp\">/guides/</span>output-management/<span class=\"hljs-comment\">#setting-up-htmlwebpackplugin</span>\n</code></pre>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、安装",
				"level": 2
			},
			{
				"label": "二、基本配置",
				"level": 2
			},
			{
				"label": "三、清理输出文件夹 clean-webpack-plugin",
				"level": 2
			},
			{
				"label": "一、clean-webpack-plugin的用法，版本号3.0.0",
				"level": 4
			},
			{
				"label": "二、Options and Defaults(Optional)",
				"level": 4
			},
			{
				"label": "问题及解决方案",
				"level": 2
			}
		],
		"id": 1611744990
	},
	{
		"data": {
			"title": "node(一) 常用API",
			"date": "2021-01-27T10:07:55.000Z",
			"tags": "node"
		},
		"content": "<a id=\"一、目录操作fs\"><h2>一、目录操作fs</h2></a><a id=\"一、读取目录\"><h4>一、读取目录</h4></a><pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-regexp\">//</span> 引入fs模块\nconst fs = require(<span class=\"hljs-string\">&#x27;fs&#x27;</span>);\n<span class=\"hljs-regexp\">//</span> 同步读取目录下的文件，返回文件数组列表 元素是文件名和文件类型对的组合 文件名.文件类型\n<span class=\"hljs-regexp\">//</span> __dirname  当前模块的目录名\nconst files = fs.readdirSync(__dirname + <span class=\"hljs-string\">&#x27;/source/_posts&#x27;</span>);\n</code></pre>\n<!--more-->\n\n<a id=\"二、文件操作\"><h4>二、文件操作</h4></a><pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> fs = require(<span class=\"hljs-string\">&#x27;fs&#x27;</span>);\n<span class=\"hljs-comment\">// </span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">file</span> = fs.readFileSync(__dirname + <span class=\"hljs-string\">&#x27;/source/_posts/&#x27;</span> + files[<span class=\"hljs-number\">2</span>]);\n</code></pre>\n<a id=\"二、process\"><h2>二、process</h2></a>process 对象是一个全局变量，提供了有关当前 Node.js 进程的信息并对其进行控制。<a id=\"一、常用方法\"><h4>一、常用方法</h4></a><pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-comment\">// 当前工作目录</span>\n<span class=\"hljs-built_in\">process</span>.cwd();\n</code></pre>\n<a id=\"参考链接\"><h2>参考链接</h2></a><blockquote>\n<a href=\"http://nodejs.cn/api/fs.html#fs_fs_readfile_path_options_callback\">http://nodejs.cn/api/fs.html#fs_fs_readfile_path_options_callback</a></blockquote>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、目录操作fs",
				"level": 2
			},
			{
				"label": "一、读取目录",
				"level": 4
			},
			{
				"label": "二、文件操作",
				"level": 4
			},
			{
				"label": "二、process",
				"level": 2
			},
			{
				"label": "一、常用方法",
				"level": 4
			},
			{
				"label": "参考链接",
				"level": 2
			}
		],
		"id": 1611742075
	},
	{
		"data": {
			"title": "自定义博客(一)",
			"date": "2021-01-27T08:52:40.000Z",
			"tags": "blog"
		},
		"content": "<a id=\"一、创建项目\"><h2>一、创建项目</h2></a><a id=\"二、解析markdown\"><h2>二、解析markdown</h2></a>使用<code>marked</code>解析markdown<!--more-->\n<a id=\"一、安装\"><h4>一、安装</h4></a><pre class='hljs'><code class=\"language-bash\"><span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">install</span> marked\n</code></pre>\n<a id=\"二、用法\"><h4>二、用法</h4></a>一、基本用法<pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-comment\">// 引入  在node环境下测试  需使用commonjs模块</span>\n<span class=\"hljs-keyword\">const</span> marked = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;marked&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> src = <span class=\"hljs-string\">&#x27;# Marked in the browser\\n\\nRendered by **marked**.&#x27;</span>\n<span class=\"hljs-comment\">// src 是符合markdown语法的字符串</span>\n<span class=\"hljs-comment\">// 会解析成HTML格式</span>\n<span class=\"hljs-built_in\">console</span>.log(marked(src));\n</code></pre>\n二、代码块高亮<br/>1、安装<code>highlight.js</code><pre class='hljs'><code class=\"language-bash\"><span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">install</span> highlight.js\n</code></pre>\n2、用法<pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> marked <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;marked&#x27;</span>;\n<span class=\"hljs-comment\">// 引入</span>\n<span class=\"hljs-keyword\">import</span> hljs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;highlight.js&#x27;</span>;\n<span class=\"hljs-comment\">// 需要引入样式，否则会没有效果</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;highlight.js/styles/atom-one-dark.css&#x27;</span>;\n\n<span class=\"hljs-comment\">// 基本设置</span>\nmarked.setOptions({\n    <span class=\"hljs-comment\">// 在此处使用</span>\n    <span class=\"hljs-attr\">highlight</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">code</span>) </span>{\n        <span class=\"hljs-keyword\">return</span> hljs.highlightAuto(code).value;\n    },\n    <span class=\"hljs-attr\">pedantic</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">gfm</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">tables</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">breaks</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">sanitize</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">smartLists</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">smartypants</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">xhtml</span>: <span class=\"hljs-literal\">false</span>\n});\n\n<span class=\"hljs-comment\">// 将&lt;pre&gt; 替换成 &lt;pre class=&#x27;hljs&#x27;&gt;  为pre标签加上类名hljs  显示代码块背景</span>\n<span class=\"hljs-built_in\">document</span>.body.innerHTML = marked(data.post).replace(<span class=\"hljs-regexp\">/&lt;pre&gt;/g</span>, <span class=\"hljs-string\">&quot;&lt;pre class=&#x27;hljs&#x27;&gt;&quot;</span>);\n</code></pre>\n<a id=\"三、解析yaml\"><h2>三、解析yaml</h2></a><a id=\"一、安装js-yaml\"><h4>一、安装<code>js-yaml</code></h4></a><pre class='hljs'><code class=\"language-bash\"><span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">install</span> js-yaml\n</code></pre>\n<a id=\"二、使用\"><h4>二、使用</h4></a>1、解析yaml格式的内容<pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> yaml = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;js-yaml&#x27;</span>);\n<span class=\"hljs-keyword\">var</span> fs   = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>);\n\n<span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-keyword\">var</span> doc = yaml.load(\n    fs.readFileSync(<span class=\"hljs-string\">&#x27;./example.yml&#x27;</span>, <span class=\"hljs-string\">&#x27;utf8&#x27;</span>)\n  );\n  <span class=\"hljs-built_in\">console</span>.log(doc);\n} <span class=\"hljs-keyword\">catch</span> (e) {\n  <span class=\"hljs-built_in\">console</span>.log(e);\n}\n</code></pre>\n2、从 JavaScript 对象还原到 yaml 文件的代码如下。<pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> yaml = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;js-yaml&#x27;</span>);\n<span class=\"hljs-keyword\">var</span> fs   = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>);\n\n<span class=\"hljs-keyword\">var</span> obj = {\n  <span class=\"hljs-attr\">fn</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> },\n  <span class=\"hljs-attr\">reg</span>: <span class=\"hljs-regexp\">/test/</span>\n};\n\n<span class=\"hljs-keyword\">try</span> {\n  fs.writeFileSync(\n    <span class=\"hljs-string\">&#x27;./example.yml&#x27;</span>,\n    yaml.dump(obj),\n    <span class=\"hljs-string\">&#x27;utf8&#x27;</span>\n  );\n} <span class=\"hljs-keyword\">catch</span> (e) {\n  <span class=\"hljs-built_in\">console</span>.log(e);\n}\n</code></pre>\n<a id=\"三、锚点跳转\"><h4>三、锚点跳转</h4></a><pre class='hljs'><code class=\"language-javascript\">    <span class=\"hljs-keyword\">const</span> scrollToAnchor = (<span class=\"hljs-built_in\">anchor</span>Name) =&gt; {\n        if (<span class=\"hljs-built_in\">anchor</span>Name) {\n            // 找到锚点\n            let <span class=\"hljs-built_in\">anchor</span>Element = document.getElementById(<span class=\"hljs-built_in\">anchor</span>Name);\n            // 如果对应id的锚点存在，就跳转到锚点\n            if(<span class=\"hljs-built_in\">anchor</span>Element) { <span class=\"hljs-built_in\">anchor</span>Element.scrollIntoView(); }\n        }\n    }\n</code></pre>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、创建项目",
				"level": 2
			},
			{
				"label": "二、解析markdown",
				"level": 2
			},
			{
				"label": "一、安装",
				"level": 4
			},
			{
				"label": "二、用法",
				"level": 4
			},
			{
				"label": "三、解析yaml",
				"level": 2
			},
			{
				"label": "一、安装js-yaml",
				"level": 4
			},
			{
				"label": "二、使用",
				"level": 4
			},
			{
				"label": "三、锚点跳转",
				"level": 4
			}
		],
		"id": 1611737560
	},
	{
		"data": {
			"title": "git(一) 远程仓库",
			"date": "2021-01-26T10:26:58.000Z",
			"tags": "git"
		},
		"content": "<a id=\"一、生成SSH密钥\"><h2>一、生成SSH密钥</h2></a><a id=\"一、输入下面的git命令，生成SSH秘钥\"><h4>一、输入下面的git命令，生成SSH秘钥</h4></a><pre class='hljs'><code class=\"language-bash\">ssh-keygen -<span class=\"hljs-built_in\">t</span> rsa -C <span class=\"hljs-string\">&quot;youremail@example.com&quot;</span>\n</code></pre>\n找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。linux   生成在路径 /root/.ssh/id_rsa.pub  文件中<br/>windows 生成在路径 C:\\Users\\admin.ssh\\id_rsa.pub 文件中<!--more-->\n\n<a id=\"二、找到github或gitee  SSH keys 页面，将id_ras.pub中的内容添加到key中\"><h4>二、找到github或gitee  SSH keys 页面，将<code>id_ras.pub</code>中的内容添加到key中</h4></a><a id=\"三、解决配置ssh公钥后，每次都要输入用户名和密码\"><h4>三、解决配置ssh公钥后，每次都要输入用户名和密码</h4></a><pre class='hljs'><code class=\"language-bash\">git config --<span class=\"hljs-keyword\">global</span> credential.helper <span class=\"hljs-keyword\">store</span>\n</code></pre>\n<a id=\"四、将本地仓库与远程仓库进行关联,git push推送到远程仓库\"><h4>四、将本地仓库与远程仓库进行关联,<code>git push</code>推送到远程仓库</h4></a><pre class='hljs'><code class=\"language-bash\"><span class=\"hljs-regexp\">//</span> 本地仓库关联远程仓库\ngit remote add origin https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/tongruixun/</span>trx-hexo.git\n<span class=\"hljs-regexp\">//</span> 本地内容推送到远程仓库\ngit push\n</code></pre>\n<a id=\"五、克隆到本地到本地仓库\"><h4>五、克隆到本地到本地仓库</h4></a>如果需要再另一台电脑上或另一个文件夹中克隆项目<pre class='hljs'><code class=\"language-bash\">git clone https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/tongruixun/</span>trx-hexo.git\n</code></pre>\n<a id=\"六、git错误\"><h4>六、git错误</h4></a>一、<code>error: failed to push some refs to &#39;https://github.com/tongruixun/trx-util.git</code><br/>问题原因: 远程库与本地库不一致造成的执行 <code>git pull --rebase origin master</code>该命令的意思是把远程库中的更新合并到（pull=fetch+merge）本地库中，–-rebase的作用是取消掉本地库中刚刚的commit，并把他们接到更新后的版本库之中<blockquote>\n<a href=\"https://blog.csdn.net/dietime1943/article/details/85682688\">https://blog.csdn.net/dietime1943/article/details/85682688</a></blockquote>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、生成SSH密钥",
				"level": 2
			},
			{
				"label": "一、输入下面的git命令，生成SSH秘钥",
				"level": 4
			},
			{
				"label": "二、找到github或gitee  SSH keys 页面，将id_ras.pub中的内容添加到key中",
				"level": 4
			},
			{
				"label": "三、解决配置ssh公钥后，每次都要输入用户名和密码",
				"level": 4
			},
			{
				"label": "四、将本地仓库与远程仓库进行关联,git push推送到远程仓库",
				"level": 4
			},
			{
				"label": "五、克隆到本地到本地仓库",
				"level": 4
			},
			{
				"label": "六、git错误",
				"level": 4
			}
		],
		"id": 1611656818
	},
	{
		"data": {
			"title": "学习网站",
			"date": "2021-01-24T17:09:01.000Z",
			"tags": "自学"
		},
		"content": "<a id=\"前端\"><h2>前端</h2></a><a id=\"JAVASCRIPT\"><h4>JAVASCRIPT</h4></a>一、 JavaScript教程<blockquote>\n<a href=\"https://wangdoc.com/javascript/\">https://wangdoc.com/javascript/</a></blockquote>\n二、ECMAScript 6 入门<blockquote>\n<a href=\"https://es6.ruanyifeng.com/#docs/set-map\">https://es6.ruanyifeng.com/#docs/set-map</a></blockquote>\n三、JavaScript中文网<blockquote>\n<a href=\"https://www.javascriptcn.com/\">https://www.javascriptcn.com/</a></blockquote>\n<!--more-->\n\n<a id=\"博客网站\"><h4>博客网站</h4></a>一、张鑫旭的个人主页<blockquote>\n<a href=\"https://www.zhangxinxu.com/\">https://www.zhangxinxu.com/</a></blockquote>\n二、廖雪峰的官方网站<blockquote>\n<a href=\"https://www.liaoxuefeng.com/\">https://www.liaoxuefeng.com/</a></blockquote>\n<a id=\"前端工具\"><h4>前端工具</h4></a>一、 颜色类<br/>1、 中国色<blockquote>\n<a href=\"http://zhongguose.com/\">http://zhongguose.com/</a></blockquote>\n2、 web安全色<blockquote>\n<a href=\"https://www.bootcss.com/p/websafecolors/\">https://www.bootcss.com/p/websafecolors/</a></blockquote>\n3、渐变配色<blockquote>\n<a href=\"https://uigradients.com/#Atlas\">https://uigradients.com/#Atlas</a></blockquote>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "前端",
				"level": 2
			},
			{
				"label": "JAVASCRIPT",
				"level": 4
			},
			{
				"label": "博客网站",
				"level": 4
			},
			{
				"label": "前端工具",
				"level": 4
			}
		],
		"id": 1611508141
	},
	{
		"data": {
			"title": "CSS(二) 动画",
			"date": "2021-01-24T16:48:26.000Z",
			"tags": "css"
		},
		"content": "<a id=\"animation\"><h1>animation</h1></a>简写属性形式,每个动画定义中的属性值的顺序很重要：可以被解析为 <time> 的第一个值被分配给animation-duration， 第二个分配给 animation-delay<pre class='hljs'><code><span class=\"hljs-built_in\">animation</span>: [<span class=\"hljs-built_in\">animation</span>-name][<span class=\"hljs-built_in\">animation</span>-duration][<span class=\"hljs-built_in\">animation</span>-timing-function]\n[<span class=\"hljs-built_in\">animation</span>-<span class=\"hljs-built_in\">delay</span>][<span class=\"hljs-built_in\">animation</span>-iteration-count][<span class=\"hljs-built_in\">animation</span>-direction] \n[<span class=\"hljs-built_in\">animation</span>-fill-mode][<span class=\"hljs-built_in\">animation</span>-play-state]\n\n<span class=\"hljs-built_in\">animation</span>: 动画名字 动画时长 速度曲线 延迟开始时间 运行次数 是否反向运行 动画播放前后应用的样式 定义动画运行或暂停\n</code></pre>\n<a id=\"一、animation-name 动画名\"><h4>一、<code>animation-name</code> 动画名</h4></a>animation-name属性指定应用的一系列动画，每个名称代表一个由@keyframes定义的动画序列。<a id=\"关键帧@keyframes 可以控制动画序列的中间步骤\"><h4>关键帧<code>@keyframes</code> 可以控制动画序列的中间步骤</h4></a>如果一个关键帧规则没有指定动画的开始或结束状态（也就是，0%/from 和100%/to，浏览器将使用元素的现有样式作为起始/结束状态。这可以用来从初始状态开始元素动画，最终返回初始状态。<br/>如果在关键帧的样式中使用了不能用作动画的属性，那么这些属性会被忽略掉，支持动画的属性仍然是有效的，不受波及。<a id=\"二、animation-duration animation-delay\"><h4>二、<code>animation-duration</code> <code>animation-delay</code></h4></a>animation-duration属性指定一个动画周期的时长。默认值为0s，表示无动画。<br/>animation-delay CSS属性定义动画于何时开始，即从动画应用在元素上到动画开始的这段时间的长度。0s是该属性的默认值，代表动画在应用到元素上后立即开始执行。<a id=\"三、animation-timing-function属性定义CSS动画在每一动画周期中执行的节奏。\"><h4>三、<code>animation-timing-function</code>属性定义CSS动画在每一动画周期中执行的节奏。</h4></a>可能值为一或多个 <timing-function><br/><timing-function> CSS 数据类型表示一个数学函数，它描述了在一个过渡或动画中一维数值的改变速度<a id=\"定时函数<timing-function>\"><h5>定时函数<timing-function></h5></a><a id=\"(1) cubic-bezier() 定时函数\"><h6>(1) cubic-bezier() 定时函数</h6></a>cubic-bezier() 定义了一条 立方贝塞尔曲线（cubic Bézier curve）这些曲线是连续的，一般用于动画的平滑变换，也被称为缓动函数（easing functions）。语法<pre class='hljs'><code>cubic-bezier(<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span> y<span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">,</span> y<span class=\"hljs-number\">2</span>)\n// <span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span> y<span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">,</span> y<span class=\"hljs-number\">2</span>是&lt;number&gt;类型的值，它们代表当前定义立方贝塞尔曲线中的P<span class=\"hljs-number\">1</span> 和 P<span class=\"hljs-number\">2</span>点的横坐标和纵坐标，X<span class=\"hljs-number\">1</span>和X<span class=\"hljs-number\">2</span>必须在[<span class=\"hljs-number\">0</span>，<span class=\"hljs-number\">1</span>]范围内，否则当前值无效。\n</code></pre>\n<a id=\"(2) 步长 The steps() class of timing-functions\"><h6>(2) 步长 <code>The steps() class of timing-functions</code></h6></a>steps() 定义了一个以等距步长划分值域的步长函数。这个阶跃函数的子类有时也称为阶梯函数。语法<pre class='hljs'><code><span class=\"hljs-function\"><span class=\"hljs-title\">steps</span><span class=\"hljs-params\">(number_of_steps, direction)</span></span>\n</code></pre>\n<a id=\"(3) 常用定时函数关键字\"><h6>(3) 常用定时函数关键字</h6></a><pre class='hljs'><code><span class=\"hljs-selector-tag\">linear</span> \n动画会以恒定的速度从初始状态过渡到结束状态\n此关键字表示定时函数<span class=\"hljs-selector-tag\">cubic-bezier</span>(<span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.0</span>)\n<span class=\"hljs-selector-tag\">ease</span>\n开始时加速地更快，但在接近中间中，加速已经开始变慢了\n此关键字表示定时函数 <span class=\"hljs-selector-tag\">cubic-bezier</span>(<span class=\"hljs-number\">0.25</span>, <span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.25</span>, <span class=\"hljs-number\">1.0</span>)类似于 <span class=\"hljs-selector-tag\">ease-in-out</span>\n<span class=\"hljs-selector-tag\">ease-in</span>\n加速\n此关键字表示定时函数<span class=\"hljs-selector-tag\">cubic-bezier</span>(<span class=\"hljs-number\">0.42</span>, <span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.0</span>)\n<span class=\"hljs-selector-tag\">ease-in-out</span>\n快<span class=\"hljs-selector-tag\">-</span>慢<span class=\"hljs-selector-tag\">-</span>快\n此关键字表示定时函数 <span class=\"hljs-selector-tag\">cubic-bezier</span>(<span class=\"hljs-number\">0.42</span>, <span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">0.58</span>, <span class=\"hljs-number\">1.0</span>)\n<span class=\"hljs-selector-tag\">ease-out</span>\n减速\n此关键字表示定时函数 <span class=\"hljs-selector-tag\">cubic-bezier</span>(<span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">0.58</span>, <span class=\"hljs-number\">1.0</span>)\n<span class=\"hljs-selector-tag\">step-start</span>\n动画会立刻跳转到结束状态，并一直停留在结束状态直到动画结束\n此关键字表示定时函数 <span class=\"hljs-selector-tag\">steps</span>(<span class=\"hljs-number\">1</span>, start)\n<span class=\"hljs-selector-tag\">step-end</span>\n动画会一直保持初始状态直到动画结束，然后立刻跳转到结束状态。\n此关键字表示定时函数 <span class=\"hljs-selector-tag\">steps</span>(<span class=\"hljs-number\">1</span>, end)\n</code></pre>\n<a id=\"四、animation-iteration-count 运行的次数\"><h4>四、<code>animation-iteration-count</code> 运行的次数</h4></a><code>animation-iteration-count</code> CSS 属性   定义动画在结束前运行的次数 可以是1次 无限循环.<br/><code>infinite</code><br/>关键字时表示无限循环<br/><code>&lt;number&gt;</code><br/>数字时表示动画播放的次数；可以用小数定义循环，来播放动画周期的一部分：例如，0.5 将播放到动画周期的一半。不可为负值。<a id=\"五、animation-direction\"><h4>五、<code>animation-direction</code></h4></a><code>animation-direction</code> CSS 属性指示动画是否反向播放，它通常在简写属性animation中设定语法<br/><code>normal</code>默认属性<br/>每个循环内动画向前循环，换言之，每个动画循环结束，动画重置到起点重新开始<br/><code>alternate</code><br/>动画交替反向运行，反向运行时，动画按步后退，同时，带时间功能的函数也反向，比如，ease-in 在反向时成为ease-out。计数取决于开始时是奇数迭代还是偶数迭代<br/><code>reverse</code><br/>反向运行动画，每周期结束动画由尾到头运行。<br/><code>alternate-reverse</code><br/>反向交替， 反向开始交替<br/>动画第一次运行时是反向的，然后下一次是正向，后面依次循环。决定奇数次或偶数次的计数从1开始<a id=\"六、animation-fill-mode\"><h4>六、<code>animation-fill-mode</code></h4></a><code>animation-fill-mode</code> 设置CSS动画在执行之前和之后如何将样式应用于其目标。语法<br/><code>none</code>默认值<br/>当动画未执行时，动画将不会将任何样式应用于目标，而是已经赋予给该元素的 CSS 规则来显示该元素<br/><code>forwards</code><br/>目标将保留由执行期间遇到的最后一个关键帧计算值。 最后一个关键帧取决于animation-direction和animation-iteration-count的值<br/><code>backwards</code><br/>动画将在应用于目标时立即应用第一个关键帧中定义的值，并在animation-delay期间保留此值。 第一个关键帧取决于animation-direction的值<br/><code>both</code><br/>动画将遵循forwards和backwards的规则，从而在两个方向上扩展动画属性<a id=\"七、animation-play-state\"><h4>七、animation-play-state</h4></a>animation-play-state CSS 属性定义一个动画是否运行或者暂停。可以通过查询它来确定动画是否正在运行。另外，它的值可以被设置为暂停和恢复的动画的重放<br/>恢复一个已暂停的动画，将从它开始暂停的时候，而不是从动画序列的起点开始在动画。<br/><code>running</code><br/>当前动画正在运行。<br/><code>paused</code><br/>当前动画已被停止<a id=\"二、示例动画\"><h2>二、示例动画</h2></a><a id=\"一、波纹动画\"><h4>一、波纹动画</h4></a><pre class='hljs'><code class=\"language-less\"><span class=\"hljs-selector-class\">.dot</span> {\n  <span class=\"hljs-attribute\">position</span>: relative;\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">2em</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">2em</span>;\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0.8em</span>;\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">50%</span>;\n\n  &amp;<span class=\"hljs-selector-pseudo\">::before</span> {\n      <span class=\"hljs-attribute\">position</span>: absolute;\n      <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>;\n      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n      <span class=\"hljs-attribute\">background</span>: inherit;\n      <span class=\"hljs-attribute\">border-radius</span>: inherit;\n      <span class=\"hljs-attribute\">animation</span>: wave <span class=\"hljs-number\">2s</span> ease-out infinite;\n  }\n\n}\n\n<span class=\"hljs-keyword\">@keyframes</span> wave {\n  50%,\n  75% {\n    <span class=\"hljs-attribute\">transform</span>: scale(<span class=\"hljs-number\">2.5</span>);\n    \n  }\n  \n  80%,\n  100% {\n    <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;\n  }\n}\n</code></pre>\n<a id=\"参考链接\"><h2>参考链接</h2></a><blockquote>\n<a href=\"https://juejin.cn/post/6844904033405108232\">https://juejin.cn/post/6844904033405108232</a></blockquote>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "animation",
				"level": 1
			},
			{
				"label": "一、animation-name 动画名",
				"level": 4
			},
			{
				"label": "关键帧@keyframes 可以控制动画序列的中间步骤",
				"level": 4
			},
			{
				"label": "二、animation-duration animation-delay",
				"level": 4
			},
			{
				"label": "三、animation-timing-function属性定义CSS动画在每一动画周期中执行的节奏。",
				"level": 4
			},
			{
				"label": "定时函数<timing-function>",
				"level": 5
			},
			{
				"label": "(1) cubic-bezier() 定时函数",
				"level": 6
			},
			{
				"label": "(2) 步长 The steps() class of timing-functions",
				"level": 6
			},
			{
				"label": "(3) 常用定时函数关键字",
				"level": 6
			},
			{
				"label": "四、animation-iteration-count 运行的次数",
				"level": 4
			},
			{
				"label": "五、animation-direction",
				"level": 4
			},
			{
				"label": "六、animation-fill-mode",
				"level": 4
			},
			{
				"label": "七、animation-play-state",
				"level": 4
			},
			{
				"label": "二、示例动画",
				"level": 2
			},
			{
				"label": "一、波纹动画",
				"level": 4
			},
			{
				"label": "参考链接",
				"level": 2
			}
		],
		"id": 1611506906
	},
	{
		"data": {
			"title": "Hexo(三) 添加动态模型插件",
			"date": "2021-01-23T09:24:54.000Z",
			"tags": "hexo",
			"categories": "博客搭建"
		},
		"content": "<meta name=\"referrer\" content=\"no-referrer\" />\n\n<a id=\"一、安装模块\"><h2>一、安装模块</h2></a><pre class='hljs'><code>npm install <span class=\"hljs-comment\">--save hexo-helper-live2d</span>\n</code></pre>\n<a id=\"二、下载模型\"><h2>二、下载模型</h2></a>使用 <code>npm install {packagename}</code> 安装模型<pre class='hljs'><code><span class=\"hljs-regexp\">//</span> hijiki 一只黑色小猫\nnpm install live2d-widget-model-hijiki\n</code></pre>\n模型仓库<blockquote>\n<a href=\"https://github.com/xiazeyu/live2d-widget-models\">https://github.com/xiazeyu/live2d-widget-models</a></blockquote>\n<!--more-->\n<a id=\"三、添加配置\"><h2>三、添加配置</h2></a><a id=\"在hexo的根目录下的_config.yml中添加下面的内容\"><h4>在hexo的根目录下的<code>_config.yml</code>中添加下面的内容</h4></a><pre class='hljs'><code class=\"language-yml\">\n<span class=\"hljs-comment\"># Live2D</span>\n<span class=\"hljs-comment\">## https://github.com/EYHN/hexo-helper-live2d</span>\n<span class=\"hljs-comment\">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span>\n<span class=\"hljs-attr\">live2d:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-comment\">#enable: false</span>\n  <span class=\"hljs-attr\">scriptFrom:</span> <span class=\"hljs-string\">local</span> <span class=\"hljs-comment\"># 默认</span>\n  <span class=\"hljs-attr\">pluginRootPath:</span> <span class=\"hljs-string\">live2dw/</span> <span class=\"hljs-comment\"># 插件在站点上的根目录(相对路径)</span>\n  <span class=\"hljs-attr\">pluginJsPath:</span> <span class=\"hljs-string\">lib/</span> <span class=\"hljs-comment\"># 脚本文件相对与插件根目录路径</span>\n  <span class=\"hljs-attr\">pluginModelPath:</span> <span class=\"hljs-string\">assets/</span> <span class=\"hljs-comment\"># 模型文件相对与插件根目录路径</span>\n  <span class=\"hljs-comment\"># scriptFrom: jsdelivr # jsdelivr CDN</span>\n  <span class=\"hljs-comment\"># scriptFrom: unpkg # unpkg CDN</span>\n  <span class=\"hljs-comment\"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span>\n  <span class=\"hljs-attr\">tagMode:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span>\n  <span class=\"hljs-attr\">debug:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 调试, 是否在控制台输出日志</span>\n  <span class=\"hljs-attr\">model:</span>\n    <span class=\"hljs-attr\">use:</span> <span class=\"hljs-string\">live2d-widget-model-hijiki</span>\n    <span class=\"hljs-comment\"># use: live2d-widget-model-wanko # node-module package name</span>\n    <span class=\"hljs-comment\"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span>\n    <span class=\"hljs-comment\"># use: ./wives/wanko # 相对于博客根目录的路径</span>\n    <span class=\"hljs-comment\"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span>\n  <span class=\"hljs-attr\">display:</span>\n    <span class=\"hljs-attr\">position:</span> <span class=\"hljs-string\">right</span>\n    <span class=\"hljs-attr\">width:</span> <span class=\"hljs-number\">145</span>\n    <span class=\"hljs-attr\">height:</span> <span class=\"hljs-number\">315</span>\n  <span class=\"hljs-attr\">mobile:</span>\n    <span class=\"hljs-attr\">show:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 是否在移动设备上显示</span>\n    <span class=\"hljs-attr\">scale:</span> <span class=\"hljs-number\">0.5</span> <span class=\"hljs-comment\"># 移动设备上的缩放       </span>\n  <span class=\"hljs-attr\">react:</span>\n    <span class=\"hljs-attr\">opacityDefault:</span> <span class=\"hljs-number\">0.7</span>\n    <span class=\"hljs-attr\">opacityOnHover:</span> <span class=\"hljs-number\">0.8</span>\n</code></pre>\n<a id=\"四、部分模型展示\"><h2>四、部分模型展示</h2></a>Epsilon<br/><img src=\"https://gitee.com/tongruixun/trx-imgs/raw/master/hexo/live2d-widget-model/51hexo.png\" alt=\"\">shizuku<br/><img src=\"https://gitee.com/tongruixun/trx-imgs/raw/master/hexo/live2d-widget-model/53hexo.png\" alt=\"\">z16<br/><img src=\"https://gitee.com/tongruixun/trx-imgs/raw/master/hexo/live2d-widget-model/56hexo.png\" alt=\"\">hibiki<br/><img src=\"https://gitee.com/tongruixun/trx-imgs/raw/master/hexo/live2d-widget-model/57hexo.png\" alt=\"\">koharu<br/><img src=\"https://gitee.com/tongruixun/trx-imgs/raw/master/hexo/live2d-widget-model/58hexo.png\" alt=\"\">hijiki<br/><img src=\"https://gitee.com/tongruixun/trx-imgs/raw/master/hexo/live2d-widget-model/ia_100000062.gif\" alt=\"\">",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、安装模块",
				"level": 2
			},
			{
				"label": "二、下载模型",
				"level": 2
			},
			{
				"label": "三、添加配置",
				"level": 2
			},
			{
				"label": "在hexo的根目录下的_config.yml中添加下面的内容",
				"level": 4
			},
			{
				"label": "四、部分模型展示",
				"level": 2
			}
		],
		"id": 1611393894
	},
	{
		"data": {
			"title": "CSS(一) 选择器",
			"date": "2021-01-21T16:30:58.000Z",
			"tags": "css"
		},
		"content": "<a id=\"一、基本选择器\"><h2>一、基本选择器</h2></a><a id=\"二、组合选择器\"><h2>二、组合选择器</h2></a><ul>\n<li>相邻兄弟选择器 <code>A + B</code></li>\n<li>普通兄弟选择器 <code>A ~ B</code></li>\n<li>子选择器 <code>A &gt; B</code></li>\n<li>后代选择器 <code>A B</code></li>\n</ul>\n<a id=\"三、伪类\"><h2>三、伪类</h2></a><a id=\"四、伪元素\"><h2>四、伪元素</h2></a><ul>\n<li><code>::after (:after)</code> 用来创建一个伪元素，作为已选中元素的最后一个子元素,默认是行内元素</li>\n<li><code>::before (:before)</code> 创建一个伪元素，其将成为匹配选中的元素的第一个子元素,默认是行内元素</li>\n</ul>\n<blockquote>\n<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference#%E9%80%89%E6%8B%A9%E5%99%A8\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference#%E9%80%89%E6%8B%A9%E5%99%A8</a></blockquote>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、基本选择器",
				"level": 2
			},
			{
				"label": "二、组合选择器",
				"level": 2
			},
			{
				"label": "三、伪类",
				"level": 2
			},
			{
				"label": "四、伪元素",
				"level": 2
			}
		],
		"id": 1611246658
	},
	{
		"data": {
			"title": "微信小程序开发 常用API汇总",
			"date": "2021-01-19T15:09:23.000Z",
			"tags": "微信小程序"
		},
		"content": "<a id=\"一、检查登录态 wx.checkSession(Object object)\"><h2>一、检查登录态 <code>wx.checkSession(Object object)</code></h2></a>检查登录态是否过期。 调用 <code>wx.login</code> 会获取新的用户登录态<blockquote>\n<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.checkSession.html\">https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.checkSession.html</a></blockquote>\n<!--more-->\n\n<a id=\"二、登录 wx.login(Object object) \"><h2>二、登录 <code>wx.login(Object object) </code></h2></a>调用登录接口获取登录凭证 (code)。通过凭证进而换取用户登录态信息，包括用户的唯一标识（openid）及本次登录的会话密钥（session_key）等。用户数据的加解密通讯需要依赖会话密钥完成。<blockquote>\n<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html\">https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html</a></blockquote>\n<a id=\"三、获取当前微信用户信息\"><h2>三、获取当前微信用户信息</h2></a><a id=\"一、使用 open-data / 获取用户信息，不需要经过用户授权可以展示开放数据，包括用户的头像，昵称，性别等\"><h4>一、使用 <code>&lt;open-data /&gt;</code> 获取用户信息，不需要经过用户授权可以展示开放数据，包括用户的头像，昵称，性别等</h4></a><blockquote>\n<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html\">https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html</a></blockquote>\n<a id=\"二、wx.getUserInfo(Object object) 获取用户信息 需要使用 button 来授权登录\"><h4>二、<code>wx.getUserInfo(Object object)</code> 获取用户信息 需要使用 button 来授权登录</h4></a><blockquote>\n<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/button.html\">https://developers.weixin.qq.com/miniprogram/dev/component/button.html</a><br/><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html\">https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html</a></blockquote>\n<a id=\"四、图片与文件\"><h2>四、图片与文件</h2></a><a id=\"一、媒体图片\"><h4>一、媒体图片</h4></a>1、 <code>wx.choseImage(Object object)</code> 从本地相册或使用相机拍照<br/>2、 <code>wx.chooseMessageFile(Object object)</code> 从微信的聊天列表中选择文件<br/>3、 <code>wx.previewImage(Object object, boolean showmenu)</code> 在新页面中全屏预览图片。预览的过程中用户可以进行保存图片、发送给朋友等操作。<br/>4、 <code>wx.previewMedia(Object object, boolean showmenu)</code> 预览图片和视频<blockquote>\n<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.saveImageToPhotosAlbum.html\">https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.saveImageToPhotosAlbum.html</a></blockquote>\n<a id=\"二、 文件管理器\"><h4>二、 文件管理器</h4></a><blockquote>\n<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.readFile.html\">https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.readFile.html</a></blockquote>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、检查登录态 wx.checkSession(Object object)",
				"level": 2
			},
			{
				"label": "二、登录 wx.login(Object object) ",
				"level": 2
			},
			{
				"label": "三、获取当前微信用户信息",
				"level": 2
			},
			{
				"label": "一、使用 open-data / 获取用户信息，不需要经过用户授权可以展示开放数据，包括用户的头像，昵称，性别等",
				"level": 4
			},
			{
				"label": "二、wx.getUserInfo(Object object) 获取用户信息 需要使用 button 来授权登录",
				"level": 4
			},
			{
				"label": "四、图片与文件",
				"level": 2
			},
			{
				"label": "一、媒体图片",
				"level": 4
			},
			{
				"label": "二、 文件管理器",
				"level": 4
			}
		],
		"id": 1611068963
	},
	{
		"data": {
			"title": "系统分析师(二)绪论",
			"date": "2021-01-17T14:34:23.000Z",
			"tags": "系统分析师"
		},
		"content": "<a id=\"信息与信息系统\"><h2>信息与信息系统</h2></a><a id=\"一、基本概念\"><h4>一、基本概念</h4></a><pre class='hljs'><code class=\"language-mermaid\">graph BT\n<span class=\"hljs-keyword\">a</span>(信息的特征)\nb[客观性]<span class=\"hljs-comment\">--&gt;a</span>\nc[普遍性]<span class=\"hljs-comment\">--&gt;a</span>\nd[无限性]<span class=\"hljs-comment\">--&gt;a</span>\ne[动态性]<span class=\"hljs-comment\">--&gt;a</span>\nf[相对性]<span class=\"hljs-comment\">--&gt;a</span>\ng[依附性]<span class=\"hljs-comment\">--&gt;a</span>\nh[变换性]<span class=\"hljs-comment\">--&gt;a</span>\ni[传递性]<span class=\"hljs-comment\">--&gt;a</span>\nj[层次性]<span class=\"hljs-comment\">--&gt;a</span>\nk[系统性]<span class=\"hljs-comment\">--&gt;a</span>\nl[转化性]<span class=\"hljs-comment\">--&gt;a</span>\n</code></pre>\n<!--more-->\n<pre class='hljs'><code class=\"language-mermaid\">graph BT\n<span class=\"hljs-keyword\">a</span>(信息的功能)\nb[为认识世界提供依据]<span class=\"hljs-comment\">--&gt;a</span>\nc[为改造世界提供指导]<span class=\"hljs-comment\">--&gt;a</span>\nd[为有序的建立提供保证]<span class=\"hljs-comment\">--&gt;a</span>\ne[为资源开发提供条件]<span class=\"hljs-comment\">--&gt;a</span>\nf[为知识的生产提供材料]<span class=\"hljs-comment\">--&gt;a</span>\n</code></pre>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "信息与信息系统",
				"level": 2
			},
			{
				"label": "一、基本概念",
				"level": 4
			}
		],
		"id": 1610894063
	},
	{
		"data": {
			"title": "Hexo(三) yilia主题添加分类页面",
			"date": "2021-01-17T12:33:49.000Z",
			"tags": [
				"hexo",
				"yilia"
			],
			"categories": [
				"博客搭建"
			]
		},
		"content": "<a id=\"一、分类页面\"><h2>一、分类页面</h2></a>根目录运行<code>hexo new page categories</code>, 会新建一个页面，将用作为分类展示页面。会在<code>\\source\\categories\\index.md</code> 生成文件<pre class='hljs'><code><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">分类</span>\n<span class=\"hljs-attr\">date:</span> <span class=\"hljs-number\">2021-01-17 12:33:49</span>\n<span class=\"hljs-attr\">toc:</span> <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">comment:</span> <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">layout:</span> <span class=\"hljs-string\">categories</span>\n<span class=\"hljs-meta\">---</span>\n</code></pre>\n<!--more-->\n<a id=\"二、新建一个布局文件\"><h2>二、新建一个布局文件</h2></a>在主题路径下  <code>\\themes\\yilia\\layout\\</code>  新建<code>categories.ejs</code>, 内容如下<pre class='hljs'><code>&lt;article <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">&quot;article&quot;</span>&gt;\n  &lt;h3 <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">&quot;category-count&quot;</span>&gt;共计 &lt;%= site.categories.<span class=\"hljs-built_in\">length</span> %&gt; 个分类, &lt;%= site.tags.<span class=\"hljs-built_in\">length</span> %&gt; 个标签&lt;/h3&gt;\n  &lt;% <span class=\"hljs-keyword\">if</span> (site.categories.<span class=\"hljs-built_in\">length</span>){ %&gt;\n  &lt;ul <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">&quot;category-list&quot;</span>&gt;\n    &lt;% site.categories.sort(&#x27;<span class=\"hljs-built_in\">name</span>&#x27;).each(function(<span class=\"hljs-built_in\">item</span>){ %&gt;\n      &lt;% <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">item</span>.posts.<span class=\"hljs-built_in\">length</span>){ %&gt;\n        &lt;li <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">&quot;category-list-item&quot;</span>&gt;\n          &lt;a href=<span class=\"hljs-string\">&quot;&lt;%- config.root %&gt;&lt;%- item.path %&gt;&quot;</span> <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">&quot;category-list-link&quot;</span> title=<span class=\"hljs-string\">&quot;&lt;%= item.name %&gt;&quot;</span>&gt;\n            &lt;%= <span class=\"hljs-built_in\">item</span>.<span class=\"hljs-built_in\">name</span> %&gt;\n            &lt;span <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">&quot;category-list-count&quot;</span>&gt;&lt;%= <span class=\"hljs-built_in\">item</span>.posts.<span class=\"hljs-built_in\">length</span> %&gt;&lt;/span&gt;\n          &lt;/a&gt;\n        &lt;/li&gt;\n      &lt;% } %&gt;\n    &lt;% }) %&gt;\n  &lt;/ul&gt;\n  &lt;% } %&gt;\n  &lt;<span class=\"hljs-keyword\">div</span> <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">&quot;tag-cloud&quot;</span>&gt;\n    &lt;%- tagcloud({\n      min_font: <span class=\"hljs-number\">20</span>, \n      max_font: <span class=\"hljs-number\">35</span>, \n      amount: <span class=\"hljs-number\">999</span>\n    }) %&gt;\n  &lt;/<span class=\"hljs-keyword\">div</span>&gt;\n&lt;/article&gt;\n</code></pre>\n<a id=\"三、添加样式\"><h2>三、添加样式</h2></a>有能力的话可以根据需求自己修改样式。下面是参考样式， 在<code>\\themes\\yilia\\source\\main.0cf68a.css</code> 中添加。不同主题main.内容不同<pre class='hljs'><code>\n<span class=\"hljs-selector-class\">.category-count</span> {\n    <span class=\"hljs-attribute\">text-align</span>:center;\n    <span class=\"hljs-attribute\">line-height</span>:<span class=\"hljs-number\">3</span>;\n    <span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">18px</span>;\n    <span class=\"hljs-attribute\">font-weight</span>:bold;\n}\n<span class=\"hljs-selector-class\">.category-list</span> {\n    <span class=\"hljs-attribute\">text-align</span>:center;\n    <span class=\"hljs-attribute\">padding</span>:<span class=\"hljs-number\">20px</span>\n}\n<span class=\"hljs-selector-class\">.category-list</span> <span class=\"hljs-selector-tag\">li</span><span class=\"hljs-selector-class\">.category-list-item</span> {\n    <span class=\"hljs-attribute\">display</span>:inline-block;\n    <span class=\"hljs-attribute\">margin</span>:<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1em</span> .<span class=\"hljs-number\">5em</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">padding</span>:<span class=\"hljs-number\">4px</span>;\n    <span class=\"hljs-attribute\">border</span>:<span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#aaaaaa</span>;\n    <span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">1.2rem</span>\n}\n<span class=\"hljs-selector-class\">.category-list</span> <span class=\"hljs-selector-tag\">li</span><span class=\"hljs-selector-class\">.category-list-item</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n    <span class=\"hljs-attribute\">background</span>:<span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">204</span>,<span class=\"hljs-number\">204</span>,<span class=\"hljs-number\">204</span>,<span class=\"hljs-number\">0.3</span>)\n}\n<span class=\"hljs-selector-class\">.tag-cloud</span> {\n    <span class=\"hljs-attribute\">text-align</span>:center;\n    <span class=\"hljs-attribute\">padding</span>:<span class=\"hljs-number\">20px</span>\n}\n<span class=\"hljs-selector-class\">.tag-cloud</span> <span class=\"hljs-selector-tag\">a</span> {\n    <span class=\"hljs-attribute\">margin</span>:<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">word-break</span>:keep-all;\n    <span class=\"hljs-attribute\">position</span>:relative\n}\n<span class=\"hljs-selector-class\">.tag-cloud</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:hover</span><span class=\"hljs-selector-pseudo\">::before</span> {\n    <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">100%</span>;\n    <span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">right</span>:auto\n}\n<span class=\"hljs-selector-class\">.tag-cloud</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">::before</span> {\n    <span class=\"hljs-attribute\">content</span>:<span class=\"hljs-string\">&quot;&quot;</span>;\n    <span class=\"hljs-attribute\">position</span>:absolute;\n    <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">right</span>:<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">bottom</span>:<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">2px</span>;\n    <span class=\"hljs-attribute\">background</span>:<span class=\"hljs-number\">#08c</span>;\n    <span class=\"hljs-attribute\">-webkit-transition</span>:width .<span class=\"hljs-number\">3s</span> ease;\n    <span class=\"hljs-attribute\">transition</span>:width .<span class=\"hljs-number\">3s</span> ease\n}\n</code></pre>\n<a id=\"参考资料\"><h2>参考资料</h2></a><blockquote>\n<a href=\"https://yansheng836.github.io/article/521a17ae.html\">https://yansheng836.github.io/article/521a17ae.html</a></blockquote>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、分类页面",
				"level": 2
			},
			{
				"label": "二、新建一个布局文件",
				"level": 2
			},
			{
				"label": "三、添加样式",
				"level": 2
			},
			{
				"label": "参考资料",
				"level": 2
			}
		],
		"id": 1610886829
	},
	{
		"data": {
			"title": "Linux操作命令(一)  文件与目录管理",
			"date": "2021-01-12T15:08:58.000Z",
			"tags": "Linux"
		},
		"content": "<a id=\"一、目录的相关操作\"><h2>一、目录的相关操作</h2></a><a id=\"一、特殊目录\"><h4>一、特殊目录</h4></a><pre class='hljs'><code><span class=\"hljs-bullet\">.       </span>代表此层目录\n<span class=\"hljs-bullet\">..      </span>代表上一层目录\n<span class=\"hljs-bullet\">-       </span>代表前一个工作目录\n~       代表目前使用者身份所在的目录\n</code></pre>\n<a id=\"二、处理目录常见命令\"><h4>二、处理目录常见命令</h4></a><pre class='hljs'><code><span class=\"hljs-keyword\">cd</span> :     切换目录(change directory，切换目录)\n<span class=\"hljs-keyword\">pwd</span> :    显示当前目录(<span class=\"hljs-keyword\">Print</span> Working Directory)\n<span class=\"hljs-keyword\">mkdir</span> :  建立一个新目录 [-mp] -<span class=\"hljs-keyword\">m</span> 设置文件的权限。直接设置，不适用默认权限。 -p 帮助你直接将所需要的目录(包含上层目录)递归创建\n<span class=\"hljs-keyword\">rmdir</span> :  删除一个空目录\n</code></pre>\n<!--more-->\n<a id=\"二、文件与目录管理\"><h2>二、文件与目录管理</h2></a><a id=\"一、文件与目录的查看 : ls\"><h4>一、文件与目录的查看 : ls</h4></a><pre class='hljs'><code>ls [-aAdfFhilnrRSt]\nls [<span class=\"hljs-comment\">--color={never,auto,always}]</span>\nls [<span class=\"hljs-comment\">--full-time]</span>\n\n选项与参数\n-a : 全部的文件，连同隐藏的文件(开头为 . 的文件)一起列出来(常用);\n-A : 全部的文件，连同隐藏的文件，但不包括.与..这两个目录；\n-d : 仅列出目录本身，而不是列出目录内的文件数据(常用)\n-f : 直接列出结果，而不进行排序(<span class=\"hljs-type\">ls</span>默认会以文件名排序)；\n-F :\n-<span class=\"hljs-type\">h</span> :\n-<span class=\"hljs-type\">i</span> :\n-<span class=\"hljs-type\">l</span> :\n-<span class=\"hljs-type\">n</span> :\n-<span class=\"hljs-type\">r</span> :\n-<span class=\"hljs-type\">R</span> :\n-<span class=\"hljs-type\">S</span> :\n-<span class=\"hljs-type\">t</span> :\n--<span class=\"hljs-type\">color</span>=never :\n--<span class=\"hljs-type\">color</span>=always :\n--<span class=\"hljs-type\">color</span>=auto :\n--<span class=\"hljs-type\">full</span>-time : \n--<span class=\"hljs-type\">time</span>={atime,ctime}\n</code></pre>\n<a id=\"二、复制、删除与移动: cp、rm、mv\"><h4>二、复制、删除与移动: cp、rm、mv</h4></a><pre class='hljs'><code>cp [-adfilprsu] 源文件(source) 目标文件 (destination)\ncp [options] source1 source2 source3 ... directory\n\n选线与参数\n-a : 相当于 -<span class=\"hljs-type\">dr</span> <span class=\"hljs-comment\">--preserve=all 的意思， 至于dr请参考下列说明(常用);</span>\n-d :\n-<span class=\"hljs-type\">f</span> :\n-<span class=\"hljs-type\">i</span> :\n-<span class=\"hljs-type\">l</span> :\n-<span class=\"hljs-type\">p</span> : 连同文件的属性(权限、用户、时间)一起复制过去，而非使用默认属性(备份常用);\n-r : 递归复制，用于目录的复制操作(常用);\n-s :\n-<span class=\"hljs-type\">u</span> :\n--<span class=\"hljs-type\">preserve</span>=<span class=\"hljs-keyword\">all</span> 除了 -p 的权限参数外，还加入SELinux的属性，links、xattr等也复制;\n// 如果源文件有两个以上，则最后一个目标文件一定要是 “目录” 才行\n</code></pre>\n<a id=\"参考资料\"><h2>参考资料</h2></a><ul>\n<li>《鸟哥的Linxu私房菜基础学习篇·第四版》</li>\n</ul>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、目录的相关操作",
				"level": 2
			},
			{
				"label": "一、特殊目录",
				"level": 4
			},
			{
				"label": "二、处理目录常见命令",
				"level": 4
			},
			{
				"label": "二、文件与目录管理",
				"level": 2
			},
			{
				"label": "一、文件与目录的查看 : ls",
				"level": 4
			},
			{
				"label": "二、复制、删除与移动: cp、rm、mv",
				"level": 4
			},
			{
				"label": "参考资料",
				"level": 2
			}
		],
		"id": 1610464138
	},
	{
		"data": {
			"title": "阅读书单(一)",
			"date": "2021-01-11T20:17:13.000Z",
			"tags": "书单"
		},
		"content": "<a id=\"前端\"><h4>前端</h4></a><strong>JavaScript</strong><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 《JaveScript高级程序设计》1  </li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 《重构-改善既有代码》1</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 《你不知道的JavaScript·上卷》1</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 《你不知道的JavaScript·中卷》1</li>\n<li><input disabled=\"\" type=\"checkbox\"> 《你不知道的JavaScript·下卷》</li>\n</ul>\n<!--more-->\n<strong>CSS</strong><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 《CSS揭秘》1 </li>\n</ul>\n<a id=\"后端\"><h4>后端</h4></a><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 《java核心技术卷一 》1      </li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 《java核心技术卷二》1    </li>\n<li><input disabled=\"\" type=\"checkbox\"> 《MySql必知必会》</li>\n</ul>\n<a id=\"代码规范\"><h4>代码规范</h4></a><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 《重构·改善既有代码》</li>\n</ul>\n<a id=\"系统分析师\"><h4>系统分析师</h4></a><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 《系统分析师教程》</li>\n<li><input disabled=\"\" type=\"checkbox\"> 《系统分析师考试全程指导》</li>\n<li><input disabled=\"\" type=\"checkbox\"> 《系统分析师历年真题解析第2版》</li>\n</ul>\n<a id=\"操作系统\"><h4>操作系统</h4></a><strong>Linux</strong><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 《鸟哥的Linux私房菜基础学习篇·第四版》0.2</li>\n</ul>\n<a id=\"其他\"><h4>其他</h4></a><strong>英语</strong><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 《程序员的英语》 0.05</li>\n<li><input disabled=\"\" type=\"checkbox\"> 《英语词汇速记大全》</li>\n</ul>\n<strong>课外</strong><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 《人性的优点》2</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 《人性的弱点》1</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 《语言的突破》2</li>\n</ul>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "前端",
				"level": 4
			},
			{
				"label": "后端",
				"level": 4
			},
			{
				"label": "代码规范",
				"level": 4
			},
			{
				"label": "系统分析师",
				"level": 4
			},
			{
				"label": "操作系统",
				"level": 4
			},
			{
				"label": "其他",
				"level": 4
			}
		],
		"id": 1610396233
	},
	{
		"data": {
			"title": "系统分析师(一) 软考流程与备考",
			"date": "2021-01-10T10:44:25.000Z",
			"tags": "系统分析师",
			"categories": "软考"
		},
		"content": "<a id=\"一、考试介绍-时间、科目\"><h2>一、考试介绍-时间、科目</h2></a><strong>考试时间</strong>  一般为5月底<br/><strong>考试标准</strong>  划分数线形式：一般情况所有科目达到45分合格<table>\n<thead>\n<tr>\n<th align=\"center\">综合知识</th>\n<th align=\"center\">案例分析</th>\n<th align=\"center\">论文写作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">客观题</td>\n<td align=\"center\">主观题</td>\n<td align=\"center\">论文题</td>\n</tr>\n<tr>\n<td align=\"center\">75道</td>\n<td align=\"center\">5道大题(只做3道)</td>\n<td align=\"center\">4道题选做一道</td>\n</tr>\n<tr>\n<td align=\"center\">150分钟</td>\n<td align=\"center\">90分钟</td>\n<td align=\"center\">120分钟</td>\n</tr>\n</tbody></table>\n<!-- more -->\n<a id=\"二、复习策略\"><h2>二、复习策略</h2></a><a id=\"科目一  综合知识\"><h3>科目一  综合知识</h3></a>特点：范围广，但考试时间多得让人犯困<strong>复习策略</strong><br/>1、各个击破。<br/>2、混合练习。<br/>3、分层做题，不听天由命。",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、考试介绍-时间、科目",
				"level": 2
			},
			{
				"label": "二、复习策略",
				"level": 2
			},
			{
				"label": "科目一  综合知识",
				"level": 3
			}
		],
		"id": 1610275465
	},
	{
		"data": {
			"title": "Hexo(二）发表文章常用命令",
			"date": "2021-01-07T20:18:45.000Z",
			"tags": "hexo",
			"categories": "博客搭建"
		},
		"content": "<a id=\"文章配置\"><h2>文章配置</h2></a><pre class='hljs'><code>// 配置\ntitle: Hexo(二) 发表文章常用命令\ndate: 2021<span class=\"hljs-string\">-01</span><span class=\"hljs-string\">-07</span> 20:18:45\n<span class=\"hljs-keyword\">tags:</span> Hexo\ncategories: hexo\n\n\n// 属性说明\ntitle: 文章标题\ndate: 文章的创建日期\n<span class=\"hljs-keyword\">tags:</span> 为文章设置标签，方便搜索\n\n  一个标签时\n  tags: 标签名\n\n  多个标签\n  tags: \n  - 标签名一\n  - 标签名二\n\ncategories: 为文章设置分类\n\n  一个分类时\n  categories: 分类名\n\n  子分类时\n  categories: \n  - 父分类名\n  - 子分类名\n</code></pre>\n<!--more-->\n<a id=\"常用命令\"><h2>常用命令</h2></a><pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-regexp\">//</span>新建文章\nhexo new <span class=\"hljs-string\">&quot;postName&quot;</span>\n\n<span class=\"hljs-regexp\">//</span> 新建页面\nhexo new page <span class=\"hljs-string\">&quot;pageName&quot;</span>\n\n<span class=\"hljs-regexp\">//</span>生成静态页面至public目录\nhexo generate\n\n<span class=\"hljs-regexp\">//</span>开启预览访问端口（默认端口<span class=\"hljs-number\">4000</span>，<span class=\"hljs-string\">&#x27;ctrl + c&#x27;</span>关闭server）\nhexo server\n\n<span class=\"hljs-regexp\">//</span>部署到Github\nhexo deploy\n\n<span class=\"hljs-regexp\">//</span>查看帮助\nhexo help\n\n<span class=\"hljs-regexp\">//</span>查看版本\nhexo version\n</code></pre>\n<a id=\"缩写\"><h2>缩写</h2></a><pre class='hljs'><code class=\"language-javascript\">hexo n == hexo <span class=\"hljs-keyword\">new</span>\nhexo g == hexo <span class=\"hljs-keyword\">generate</span>\nhexo s == hexo server\nhexo d == hexo deploy\n</code></pre>\n<a id=\"组合命令\"><h2>组合命令</h2></a><pre class='hljs'><code class=\"language-javascript\"><span class=\"hljs-regexp\">//</span>生成并本地预览\nhexo s -g\n\n<span class=\"hljs-regexp\">//</span> 生成并上传\nhexo d -g\n</code></pre>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "文章配置",
				"level": 2
			},
			{
				"label": "常用命令",
				"level": 2
			},
			{
				"label": "缩写",
				"level": 2
			},
			{
				"label": "组合命令",
				"level": 2
			}
		],
		"id": 1610050725
	},
	{
		"data": {
			"title": "Hexo(一) 基于Linux部署个人博客",
			"date": "2021-01-07T20:00:00.000Z",
			"tags": "hexo",
			"categories": "博客搭建"
		},
		"content": "<a id=\"一、安装nodejs\"><h2>一、安装nodejs</h2></a><pre class='hljs'><code><span class=\"hljs-regexp\">//</span> 官网下载二进制包的方式安装 node-v14.<span class=\"hljs-number\">15.4</span>-linux-x64.tar.xz\n<span class=\"hljs-regexp\">//</span> 分两层 先解压xz  \n<span class=\"hljs-regexp\">//</span> d 解压文件 \n<span class=\"hljs-regexp\">//</span> k 保留原文件（如果不想保留，可以去掉k）\nxz -dk node-v14.<span class=\"hljs-number\">15.4</span>-linux-x64.tar.xz\n\n<span class=\"hljs-regexp\">//</span> 解压 tar  \n<span class=\"hljs-regexp\">//</span> x 解压文件\n<span class=\"hljs-regexp\">//</span> v 显示解压文件列表\n<span class=\"hljs-regexp\">//</span> f 指定要解压的文件名\n<span class=\"hljs-regexp\">//</span> -C 解压到指定目录\ntar -xvf node-v14.<span class=\"hljs-number\">15.4</span>-linux-x64.tar\n\n<span class=\"hljs-regexp\">//</span>或者一行命令直接解压\ntar -xvf node-v14.<span class=\"hljs-number\">15.1</span>-linux-x64.tar.xz\n\n<span class=\"hljs-regexp\">//</span> Linux 中建立软连接  相当于windows创建快捷方式\n<span class=\"hljs-regexp\">//</span> <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/node/</span>node-v14.<span class=\"hljs-number\">15.4</span>-linux-x64<span class=\"hljs-regexp\">/bin/</span>node  node所在目录\n<span class=\"hljs-regexp\">//</span> <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span>node   \nln -s <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/node/</span>node-v14.<span class=\"hljs-number\">15.4</span>-linux-x64<span class=\"hljs-regexp\">/bin/</span>node <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span>node\nln -s <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/node/</span>node-v14.<span class=\"hljs-number\">15.4</span>-linux-x64<span class=\"hljs-regexp\">/bin/</span>npm <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/bin/</span>npm\n\n<span class=\"hljs-regexp\">//</span> 淘宝镜像源\nnpm install -g cnpm --registry=https<span class=\"hljs-regexp\">//</span>registry.npm.taobao.org\n\n</code></pre>\n<!-- more -->\n\n<a id=\"二、yum方式安装git\"><h2>二、yum方式安装git</h2></a><pre class='hljs'><code class=\"language-bash\">yum <span class=\"hljs-keyword\">install</span> -y git\n</code></pre>\n<a id=\"三、安装Hexo\"><h2>三、安装Hexo</h2></a><pre class='hljs'><code class=\"language-bash\">cnpm install -g hexo <span class=\"hljs-keyword\">cli</span>\n</code></pre>\n<pre class='hljs'><code class=\"language-bash\">hexo <span class=\"hljs-keyword\">init</span>\n</code></pre>\n启动 hexo <pre class='hljs'><code class=\"language-bash\">hexo s   <span class=\"hljs-regexp\">//</span>hexo start 或 hexo sever 的简写\n</code></pre>\n",
		"separator": "---",
		"prefixSeparator": true,
		"directory": [
			{
				"label": "一、安装nodejs",
				"level": 2
			},
			{
				"label": "二、yum方式安装git",
				"level": 2
			},
			{
				"label": "三、安装Hexo",
				"level": 2
			}
		],
		"id": 1610049600
	}
]